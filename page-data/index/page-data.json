{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"단편화 이전 글에서 언급한 내외부 단편화를 간단히 정리했습니다. 내부 단편화 1gb의 메모리 공간에 990mb의 프로세스가 적재된다고 가정하겠습니다. 10mb의 공간이 남으며 새로운 프로세스를 적재하기엔 좁은 공간입니다. 필요 없는 기억자료가 할당된 영역 내부에 있지만, 쓰이지 않는 것을 내부 단편화라 합니다. 외부 단편화 두 개의 1gb의 메모리 공간에…","fields":{"slug":"/O.S./fragmentation/"},"frontmatter":{"date":"July 09, 2020","title":"[OS] 단편화","category":"O.S.","draft":false}}},{"node":{"excerpt":"앞서 작성한 글에서 다중 프로그래밍을 실현하기 위한 이야기가 많이 등장했습니다. 다중 프로그래밍을 실현하기 위해 많은 프로세스를 동시에 메모리에 올려둬야 합니다. 가상 메모리는 프로세스 전체가 메모리 내에 올라오지 않더라도 실행이 가능하도록하는 기법입니다. 프로그램이 물리 메모리보다 커도 된다는 장점이 있는 이 가상 메모리에 대해 작성해볼까 합니다. 가상…","fields":{"slug":"/O.S./9_virtual_memory/"},"frontmatter":{"date":"July 09, 2020","title":"[공룡책] 가상메모리","category":"O.S.","draft":false}}},{"node":{"excerpt":"가상기억 장치 시스템에서, 교체될 페이지의 내용이 변경되었는지를 표시하는 비트 페이징 앞선 글에서 페이징에 대해 언급했습니다. 페이징 기법은 데이터를 페이지 단위로 쪼개서 관리하는 기법입니다. 보조기억장치는 공간이 큰 대신 접근할 때 탐색이 어렵습니다. 때문에 자주 사용하는 데이터는 주기억장치에 두고 접근합니다. Dirty Bit write한 적 있는 d…","fields":{"slug":"/O.S./dirty_bit/"},"frontmatter":{"date":"July 09, 2020","title":"[OS] Dirty Bit","category":"O.S.","draft":false}}},{"node":{"excerpt":"CPU 스케줄링의 결과로 CPU 이용률과 사용자에게 제공하는 컴퓨터 응답속도를 향상할 수 있습니다. 하지만 이러한 성능 향상을 위해 많은 프로세스를 메모리에 유지해야합니다. 이 글에서는 메모리를 관리하는 다양한 방법에 관해 설명합니다. 주소할당 메모리 주소공간에서 명령어와 데이터 바인딩은 그 바인딩이 이루어지는 시점에 따라 다음과 같이 구분됩니다. Com…","fields":{"slug":"/O.S./8_main_memory/"},"frontmatter":{"date":"July 08, 2020","title":"[공룡책] 메인메모리","category":"O.S.","draft":false}}},{"node":{"excerpt":"이전 글에서 동기화에 대한 이야기를 하며 교착상태라는 이야기가 나왔습니다. Operating System - 동기화 Operating System - 동기화 예제 교착상태는 세마포가 Ready Queue 를 가지고 있고 둘 이상의 프로세스가 Critical Section 진입을 무한정 기다리고 있고 Critical Section 에서 실행되는 프로세스는 …","fields":{"slug":"/O.S./7_deadlock/"},"frontmatter":{"date":"July 07, 2020","title":"[공룡책] 교착상태","category":"O.S.","draft":false}}},{"node":{"excerpt":"Critical Section 문제를 해결하기 위해서는 3가지 조건이 충족해야 합니다. 세 가지 조건을 충족한 고전적인 방법으로 피터슨의 알고리즘이 존재합니다. 기본 개념 프로세스가 2개일 때만 가능하고, 3개일 때는 아직 연구중 자원을 공유하는 2개의 프로세스 간에는 Flag와 turn변수가 공유됩니다. turn은 PCB와 비슷한 개념입니다. 진입할 프…","fields":{"slug":"/O.S./peterson/"},"frontmatter":{"date":"July 07, 2020","title":"[OS] 피터슨의 알고리즘","category":"O.S.","draft":false}}},{"node":{"excerpt":"Operating System - 동기화 이전 글에서는 발생할 수 있는 문제에 대해 많이 언급했습니다. 또한 임계구역 문제, 경쟁조건이 없는 프로그램을 설계할 때 발생하는 문제, 교착상태, 라이브니스 위험 등을 언급했습니다. 이 글에서는 제시된 도구를 고전적인 동기화 문제에 적용합니다. 유한 버퍼 문제 먼저 유한 버퍼 문제가 존재합니다. Readers-W…","fields":{"slug":"/O.S./6_sync_ex/"},"frontmatter":{"date":"July 06, 2020","title":"[공룡책] 동기화 예제","category":"O.S.","draft":false}}},{"node":{"excerpt":"Getting Started 😎 1. Create a Gatsby site. If you are not using , following Gatsby Getting Started 2. Start developing. 3. Add your content You can write… contents to blog in  directory. resume  dire…","fields":{"slug":"/development/quick_start/"},"frontmatter":{"date":"July 05, 2020","title":"Quick Start","category":"development","draft":false}}},{"node":{"excerpt":"논리 주소 공간을 공유하는 협력적 프로세스의 질서 있는 실행을 보장하며 이를 통해 데이터의 일관성을 유지하는 다양한 매커니즘을 논의합니다. 임계구역 Critical Section 각 프로세스는 임계구역이라고 부르는 코드 부분을 포함하고 있고, 그 안에서는 하나 이상의 다른 프로세스와 공유하는 데이터에 접근하고 갱신할 수 있습니다. 임계구역 문제는 상호배제…","fields":{"slug":"/O.S./5_sync/"},"frontmatter":{"date":"July 05, 2020","title":"[공룡책] 동기화","category":"O.S.","draft":false}}},{"node":{"excerpt":"운영체제는 CPU를 프로세스 간 교환함으로써 보다 생산적으로 동작합니다. 코어가 하나인 시스템에선 한순간에 오직 하나의 프로세스만이 실행될 수 있습니다. 나머지 프로세스는 CPU의 코어가 가용 상태가 되어야 실행시킬 수 있으며 다중 프로그래밍의 목적은 CPU 이용률을 최대화하기 위해 항상 실행중인 프로세스를 가지게 하는 데 있습니다. 이 때 프로세스 또는…","fields":{"slug":"/O.S./4_scheduling/"},"frontmatter":{"date":"July 04, 2020","title":"[공룡책] CPU 스케줄링","category":"O.S.","draft":false}}},{"node":{"excerpt":"Multilevel Queue 여러개의 큐에 여러 스케줄링을 적용하는 기법 다단계 큐를 이해하기 앞서 다른 스케줄링 기법을 알 필요가 있습니다. 여기서 언급하는 기법은 FCFS, RR, Priority 세 기법입니다. 작업이 분류되고, Ready Queue에서는 우선순위에 맞게 작업이 스케줄링 됩니다. 시스템 작업, 대화형 작업, 일괄처리 작업 등으로 분…","fields":{"slug":"/O.S./queue/"},"frontmatter":{"date":"July 04, 2020","title":"[OS] 다단계 큐와 다단계 피드백 큐","category":"O.S.","draft":false}}},{"node":{"excerpt":"Welcome, Gatsby! This starter is full-package for your new blog! 1. Support Four frontmatter title date category draft 2. Code highlighting With Fira Code font Support highlighting with prism\n2-1. Us…","fields":{"slug":"/development/hello/"},"frontmatter":{"date":"July 04, 2020","title":"Welcome Bee starter","category":"development","draft":false}}},{"node":{"excerpt":"앞서 작성한 운영체제, 프로세스에 이어 스레드에 대해 간단히 이야기합니다. 스레드 CPU 이용의 기본 단위입니다. 스레드 ID, PC, 레지스터 집합, 스택으로 구성됩니다. 프로세스 vs 스레드 프로세스는 실행중인 프로그램의 인스턴스이며, 스레드는 실행되는 흐름의 단위입니다. 한 프로그램에서 둘 이상의 프로세스를 생성한다면 빈번한 context switc…","fields":{"slug":"/O.S./3_thread/"},"frontmatter":{"date":"July 03, 2020","title":"[공룡책] 스레드","category":"O.S.","draft":false}}},{"node":{"excerpt":"앞서 작성한 운영체제에 이어서 프로세스에 대해 간단히 이야기합니다. 프로세스 초기 컴퓨터 시스템은 한 번에 하나의 프로그램만을 실행시켰습니다. 반면 오늘날의 컴퓨터 시스템들은 메모리에 다수의 프로그램이 적재되어 병행 실행되는 것을 허용합니다. 프로세스란 실행중인 프로그램을 말합니다. 프로세스가 무엇이고 어떻게 표현되며 어떻게 동작하는지 알아보겠습니다. 프…","fields":{"slug":"/O.S./2_process/"},"frontmatter":{"date":"July 02, 2020","title":"[공룡책] 프로세스","category":"O.S.","draft":false}}},{"node":{"excerpt":"Test1","fields":{"slug":"/Android/test2/"},"frontmatter":{"date":"July 02, 2020","title":"Category Test2","category":"Android","draft":false}}},{"node":{"excerpt":"서론 서론에선 앞으로의 내용을 간단히 요약합니다. 이 후 작성하는 글은 운영체제, 프로세스, 스레드 순서대로 간단히 이야기합니다. 운영체제를 공부하기 전 운영체제가 뭔지, 운영체제를 왜 사용할까 정리하고 시작합니다. 운영체제 컴퓨터 하드웨어를 관리하는 소프트웨어 운영 체제는 컴퓨터 하드웨어가 컴퓨터 소프트웨어와 통신하고 작동하도록하는 소프트웨어 프로그램입…","fields":{"slug":"/O.S./1_os/"},"frontmatter":{"date":"July 01, 2020","title":"[공룡책] 운영체제","category":"O.S.","draft":false}}},{"node":{"excerpt":"Test9","fields":{"slug":"/essay/test9/"},"frontmatter":{"date":"June 14, 2020","title":"Test9","category":"essay","draft":false}}},{"node":{"excerpt":"Test8","fields":{"slug":"/essay/test8/"},"frontmatter":{"date":"June 14, 2020","title":"Test8","category":"essay","draft":false}}},{"node":{"excerpt":"Test7","fields":{"slug":"/essay/test7/"},"frontmatter":{"date":"June 14, 2020","title":"Test7","category":"essay","draft":false}}},{"node":{"excerpt":"Test6","fields":{"slug":"/essay/test6/"},"frontmatter":{"date":"June 14, 2020","title":"Test6","category":"essay","draft":false}}},{"node":{"excerpt":"Test5","fields":{"slug":"/essay/test5/"},"frontmatter":{"date":"June 14, 2020","title":"Test5","category":"essay","draft":false}}},{"node":{"excerpt":"Test4","fields":{"slug":"/essay/test4/"},"frontmatter":{"date":"June 14, 2020","title":"Test4","category":"essay","draft":false}}},{"node":{"excerpt":"Test3","fields":{"slug":"/essay/test3/"},"frontmatter":{"date":"June 14, 2020","title":"Test3","category":"essay","draft":false}}},{"node":{"excerpt":"Test2","fields":{"slug":"/essay/test2/"},"frontmatter":{"date":"June 14, 2020","title":"Test2","category":"essay","draft":false}}},{"node":{"excerpt":"Test1","fields":{"slug":"/essay/test1/"},"frontmatter":{"date":"June 14, 2020","title":"Test1","category":"essay","draft":false}}},{"node":{"excerpt":"Second Post","fields":{"slug":"/development/second/"},"frontmatter":{"date":"February 03, 2019","title":"Second Post","category":"development","draft":false}}},{"node":{"excerpt":"Third Post","fields":{"slug":"/development/third/"},"frontmatter":{"date":"February 01, 2019","title":"Third Post","category":"development","draft":false}}},{"node":{"excerpt":"리눅스는 서버 환경에 원격으로 접속해서 원하는 작업을 할 수 있는 운영체제입니다. GUI 환경 보다는 CLI 환경을 주로 사용하며 명령어에 익숙해진다면 보다 능률좋은 작업을 진행할 수 있습니다. 다중 사용자가 원격으로 접속해 사용하는 멀티유저 환경을 지향하는 이 운영체제는 어떻게 쓰이는지 보겠습니다. 1. 설치 리눅스가 어떻게 쓰이는지 직접 확인해보기 위…","fields":{"slug":"/O.S./Linux/"},"frontmatter":{"date":"July 02, 2000","title":"[OS] Linux","category":"O.S.","draft":false}}},{"node":{"excerpt":"메모리 관리 시뮬레이션 Heap allocation Algorithm Buddy memory allocation - Wikipedia Heap 자료구조는 주로 동적으로 할당되며 블록의 크기가 일정하지 않습니다. 따라서 외부 단편화가 생기는 경우가 많으며 이를 방지하기 위해 빈 공간을 찾아 집어넣는 과정이 필요합니다. 때문에 연결리스트나 해쉬맵 자료구조가 …","fields":{"slug":"/O.S./GC/"},"frontmatter":{"date":"July 02, 2000","title":"[OS] Garbage Collector","category":"O.S.","draft":false}}},{"node":{"excerpt":"1. 캐시 캐시 컴퓨터를 구성하는 메모리는 다양한 종류가 있습니다. 대표적으로 RAM, SSD, HDD가 있습니다. SSD와 RAM의 차이는 무엇일까요? 간단하게 용량과 거리라고 생각하면 됩니다. RAM에 저장된 파일은 빠르게 탐색할 수 있지만 용량이 적습니다. SSD에는 파일을 많이 저장할 수 있지만 램보다는 느린 속도를 보입니다. 캐시메모리 역시 메모…","fields":{"slug":"/O.S./cache/"},"frontmatter":{"date":"July 02, 2000","title":"[OS] Cache","category":"O.S.","draft":false}}}]}},"pageContext":{}}}