{"componentChunkName":"component---src-templates-blog-post-js","path":"/D.S./red_black_tree/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"7c931a12-fe5e-5f65-9e7d-3bd5279a54af","excerpt":"Red Black Tree BST는 삽입, 탐색, 삭제 연산이 O(h)의 시간복잡도를 갖습니다. (h는 트리의 높이)\n트리의 밸런스가 무너진다면 트리의 높이는 N이 될 수 있습니다.\n기존 BST 자료구조에서 트리의 균형을 잡아 최악의 경우를 없애 O(logN)을 유지하기 위해 Red-Black Tree를 사용합니다. 규칙 Color Red의 자식은 Black 입니다. 루트노드와 리프노드(NIL노드)는 Black…","html":"<h2 id=\"red-black-tree\" style=\"position:relative;\"><a href=\"#red-black-tree\" aria-label=\"red black tree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Red Black Tree</h2>\n<p>BST는 삽입, 탐색, 삭제 연산이 O(h)의 시간복잡도를 갖습니다. (h는 트리의 높이)\n트리의 밸런스가 무너진다면 트리의 높이는 N이 될 수 있습니다.\n기존 BST 자료구조에서 트리의 균형을 잡아 최악의 경우를 없애 O(logN)을 유지하기 위해 Red-Black Tree를 사용합니다.</p>\n<h2 id=\"규칙\" style=\"position:relative;\"><a href=\"#%EA%B7%9C%EC%B9%99\" aria-label=\"규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>규칙</h2>\n<h3 id=\"color\" style=\"position:relative;\"><a href=\"#color\" aria-label=\"color permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Color</h3>\n<ol>\n<li>Red의 자식은 Black 입니다.</li>\n<li>루트노드와 리프노드(NIL노드)는 Black 입니다.</li>\n<li>모든 노드에 대해서 그 노드로부터 자손인 리프노드에 이르는 모든 경로에는 동일한 개수의 Black이 존재합니다.</li>\n</ol>\n<h3 id=\"nil-노드\" style=\"position:relative;\"><a href=\"#nil-%EB%85%B8%EB%93%9C\" aria-label=\"nil 노드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NIL 노드</h3>\n<p>균형을 맞추기 위해 필요한 더미노드입니다.</p>\n<p>새로 삽입되는 노드가 Black이라면 3번 규칙을 어기게 됩니다.\n때문에 Red를 삽입하면 2번 규칙을 어기게 됩니다.\n이 때, Red를 삽입하고 항상 자식노드로 Black이 존재한다면 1,2,3번 규칙 모두 지켜낼 수 있습니다.\n이를 위해 추가된 노드가 NIL 노드입니다. NIL 노드는 항상 모두의 자식으로써 Black으로 존재합니다.</p>\n<h2 id=\"높이\" style=\"position:relative;\"><a href=\"#%EB%86%92%EC%9D%B4\" aria-label=\"높이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>높이</h2>\n<p>레드블랙트리의 핵심은 트리의 균형을 잡아 높이를 logN으로 줄여 삽입, 탐색, 삭제연산의 시간복잡도를 최악으로 향하지 않게 하는 것입니다.\n높이는 리프노드까지의 경로에 포함된 엣지의 개수입니다.</p>\n<p><code class=\"language-text\">1. 높이가 h인 노드의 bh는 bh >= h/2를 만족합니다.</code>\n<code class=\"language-text\">2. 노드 x를 루트로하는 임의의 서브트리는 적어도 2^bh(x) - 1개의 내부노드를 포함합니다.</code>\n<code class=\"language-text\">(단, bh는 블랙 높이를 뜻하며 내부노드는 리프노드를 제외한 노드의 개수를 뜻합니다.)</code></p>\n<h3 id=\"높이에-대한-증명\" style=\"position:relative;\"><a href=\"#%EB%86%92%EC%9D%B4%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A6%9D%EB%AA%85\" aria-label=\"높이에 대한 증명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>높이에 대한 증명</h3>\n<p>첫번째는 정의를 통해 유추할 수 있습니다.\nRed노드는 Black노드와 달리 연속될 수 없으므로 연속될 수 있으며 루트와 리프노드인 Black 노드의 개수는 항상 Red 노드의 개수보다 크거나 같습니다.</p>\n<p>두번째는 귀납법으로 증명합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">h(x)는 x노드의 높이, n(x)는 x노드의 서브트리 노드의 개수라 가정합니다.\n\ni) h(x) = 0일 때, \n높이가 0인 x는 리프노드입니다. 이 때, 내부노드의 개수는 0입니다.\n따라서, 2^0 - 1 = 0이 성립합니다.\n\nii) h(x) = k가 성립한다고 가정할 때, h(x) = k + 1인 경우\nx의 바로 밑에 있는 두 자식노드를 각각 a, b라고 가정합니다.\nn(x) >= n(a) + n(b) + 1 이고,\n\n내부노드의 개수는 적어도 높이보다 크거나 같으므로 본인 노드를 제외한 개수보다 크거나 같습니다.\nn(x) >= 2bh(a) - 1 + 2bh(b) - 1 + 1 = 2bh(a) + 2bh(b) - 1\n\na, b노드가 각각 black일 때를 고려해\nbh(a) >= bh(x) - 1 이므로 \nn(x) >= 2bh(a) - 1 + 2bh(b) - 1 + 1 = 2bh(a) + 2bh(b) - 1 >= 2bh(x) - 1 + 2bh(x) - 1 - 1\n따라서, n(x) >= 4bh(x) - 3 >= 2bh(x) - 1 가 성립합니다.</code></pre></div>\n<p>위 증명을 통해 시간복잡도 역시 증명할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2^bh &lt;= n\n2^bh &lt;= n + 1\nbh &lt;= log2(n + 1)\nh &lt;= 2log2(n + 1)</code></pre></div>\n<p>따라서, h = O(logn)이 성립합니다.</p>\n<h2 id=\"회전\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EC%A0%84\" aria-label=\"회전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회전</h2>\n<p>x의 right 노드를 y라 할 때, y의 left 노드를 x노드로 만드는 것을 left rotate라 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/** condition\ny != right[x] != NIL\nparent[root] == NIL\n*/</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">leftRotation</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> Node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> y <span class=\"token operator\">=</span> right<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n    right<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span>\n    parent<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n    parent<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">when</span> <span class=\"token punctuation\">{</span>\n        parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> NIL <span class=\"token operator\">-></span> root <span class=\"token operator\">=</span> y\n        x <span class=\"token operator\">==</span> left<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> left<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y\n        <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> right<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y\n    <span class=\"token punctuation\">}</span>\n\n    left<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n    parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<ul>\n<li><a href=\"https://github.com/namjunemy/TIL/blob/master/Algorithm/red_black_tree_01.md\">https://github.com/namjunemy/TIL/blob/master/Algorithm/red_black_tree_01.md</a></li>\n</ul>","frontmatter":{"title":"[자료구조] Red-Black-Tree","date":"August 06, 2022"}}},"pageContext":{"slug":"/D.S./red_black_tree/","previous":{"fields":{"slug":"/D.S./hash_table/"},"frontmatter":{"title":"[자료구조] 해시테이블"}},"next":{"fields":{"slug":"/D.S./heap/"},"frontmatter":{"title":"[자료구조] Heap"}}}},"staticQueryHashes":["2486386679","3128451518"]}