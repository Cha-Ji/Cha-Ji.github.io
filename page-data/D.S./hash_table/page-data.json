{"componentChunkName":"component---src-templates-blog-post-js","path":"/D.S./hash_table/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"6c6b4ba9-3ea1-5b33-bd4b-427e6b8d24a8","excerpt":"구현 간단한 해시테이블을 구현하기 위해선, 연결리스트와 해시코드 함수만 있으면 됩니다.\n다음과 같은 순서로 구현할 수 있으며, 을 조심해야합니다. 키의 해시코드 계산하기 배열의 인덱스 구하기. 키와 값을 해당 인덱스에 저장하기. 이 때 충돌이란 서로 다른 두 개의 키가 같은 해시코드를 가리키거나 같은 인덱스를 가리키는 경우를 말합니다.\n와 은 유한하기 때문에 발생하며 연결리스트로 구현해 대비합니다.\n충돌이 자주 발생한다면 탐색시간은 O(N)이 됩니다. 충돌을 최소화시킨다면 탐색시간은 O(…","html":"<h2 id=\"구현\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84\" aria-label=\"구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현</h2>\n<p>간단한 해시테이블을 구현하기 위해선, 연결리스트와 해시코드 함수만 있으면 됩니다.\n다음과 같은 순서로 구현할 수 있으며, <code class=\"language-text\">충돌</code>을 조심해야합니다.</p>\n<ol>\n<li>키의 해시코드 계산하기</li>\n<li>배열의 인덱스 구하기.</li>\n<li>키와 값을 해당 인덱스에 저장하기.</li>\n</ol>\n<p>이 때 충돌이란 서로 다른 두 개의 키가 같은 해시코드를 가리키거나 같은 인덱스를 가리키는 경우를 말합니다.\n<code class=\"language-text\">int</code>와 <code class=\"language-text\">long</code>은 유한하기 때문에 발생하며 연결리스트로 구현해 대비합니다.\n충돌이 자주 발생한다면 탐색시간은 O(N)이 됩니다. 충돌을 최소화시킨다면 탐색시간은 O(1)입니다.</p>\n<h3 id=\"균형-이진-탐색-트리\" style=\"position:relative;\"><a href=\"#%EA%B7%A0%ED%98%95-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC\" aria-label=\"균형 이진 탐색 트리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>균형 이진 탐색 트리</h3>\n<p>균형 이진 탐색 트리를 사용해 구현한다면 탐색시간이 O(logN)이 됩니다.\n또한 큰 배열을 미리 할당할 필요가 없기 때문에 잠재적으로 적은 공간을 사용합니다.\n그리고 키의 집합을 순차로 접근한다는 특징이 있습니다.</p>\n<h2 id=\"arraylist와-가변-크기-배열\" style=\"position:relative;\"><a href=\"#arraylist%EC%99%80-%EA%B0%80%EB%B3%80-%ED%81%AC%EA%B8%B0-%EB%B0%B0%EC%97%B4\" aria-label=\"arraylist와 가변 크기 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ArrayList와 가변 크기 배열</h2>\n<p><code class=\"language-text\">Java</code>에서의 동적 가변 크기 기능이 내재되어 있는 자료구조로 <code class=\"language-text\">ArrayList</code>를 사용합니다.\n접근시간은 O(1)이고 배열이 가득차면 배열의 크기를 두 배로 늘립니다. 크기를 늘리는건 O(n)이지만 자주 발생하지 않아 시간복잡도에 영향을 미치지 않습니다.</p>\n<h2 id=\"stringbuilder\" style=\"position:relative;\"><a href=\"#stringbuilder\" aria-label=\"stringbuilder permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>StringBuilder</h2>\n<p>문자열을 이어붙일 때에는 두 개의 문자열을 읽어들인 뒤 문자를 하나한 새로운 문자열에 복사해야 합니다.\n<code class=\"language-text\">O(x + 2x + ... + nx) = O(n^2)</code></p>\n<p><code class=\"language-text\">StringBuilder</code>가 이 문제를 해결해줍니다. 단순하게 가변크기 배열을 이용해서 필요한 경우에만 문자열을 복사하게끔 해줍니다.</p>\n<h2 id=\"용어\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4\" aria-label=\"용어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어</h2>\n<p>충돌에 대해 이야기하기 전 간단히 용어를 정리합니다.</p>\n<h3 id=\"bucket\" style=\"position:relative;\"><a href=\"#bucket\" aria-label=\"bucket permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bucket</h3>\n<p>테이블의 크기이며 해시함수의 결과 범위입니다.</p>\n<h3 id=\"slot\" style=\"position:relative;\"><a href=\"#slot\" aria-label=\"slot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slot</h3>\n<p>한 버킷에 저장될 키값의 개수입니다.</p>\n<h3 id=\"load-factor\" style=\"position:relative;\"><a href=\"#load-factor\" aria-label=\"load factor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Load Factor</h3>\n<p>load factor는 간단히 부하율이라고 생각하면 됩니다.\n전체 버킷에서 사용중인 버킷의 비율을 말하며 100%에 가까울수록 성능이 낮습니다.</p>\n<h2 id=\"충돌\" style=\"position:relative;\"><a href=\"#%EC%B6%A9%EB%8F%8C\" aria-label=\"충돌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>충돌</h2>\n<p>서로 다른 key값이 같은 해시값을 가질 때 충돌이 발생했다고 합니다.\n해시 충돌이 일어난다면 탐색의 효율은 O(1)에서 O(N)로 증가하게 되며 해결 방법 중 두가지를 소개합니다.</p>\n<h3 id=\"1seperated-chaining\" style=\"position:relative;\"><a href=\"#1seperated-chaining\" aria-label=\"1seperated chaining permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.Seperated Chaining</h3>\n<p>Java에서 사용하는 방식이며 충돌한 해시값의 슬롯을 LinkedList에 추가합니다.\n메모리의 한계가 없다면 데이터를 모두 저장할 수 있다는 장점이 있습니다.\n최악 시간복잡도가 O(n)이 되며 트리를 구성해 시간을 줄입니다.</p>\n<h3 id=\"2open-addressing\" style=\"position:relative;\"><a href=\"#2open-addressing\" aria-label=\"2open addressing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.Open Addressing</h3>\n<p>충돌 시 빈 공간을 알아서 찾아내 저장합니다.\n포인터를 사용하지 않아도 돼 구현이 간편하다는 장점이 있습니다.</p>\n<h4 id=\"linear-probing\" style=\"position:relative;\"><a href=\"#linear-probing\" aria-label=\"linear probing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linear probing</h4>\n<p>탐색을 통해 빈 slot이 나올 때 위치가 결정됩니다.</p>\n<p>삽입 또는 검색연산은 NIL을 탐색하거나 NIL이 아닌 것을 탐색하는 선형적인 탐색을 거칩니다.\n삭제연산은 slot을 빈 slot으로 만드는 대신 삭제표시로 대체합니다. 검색이 멈추는 경우를 방지하기 위함입니다.</p>\n<p>구현이 쉽지만 한 번 충돌나면 집중적으로 충돌이 발생한다는 단점이 있습니다.</p>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<ul>\n<li>게일 라크만 맥도웰 지음. <em>코딩인터뷰 완전분석</em> 프로그래밍 인사이트, 2017</li>\n<li><a href=\"https://ryu-e.tistory.com/87\">https://ryu-e.tistory.com/87</a></li>\n<li><a href=\"https://github.com/WeareSoft/tech-interview/blob/master/contents/datastructure.md\">https://github.com/WeareSoft/tech-interview/blob/master/contents/datastructure.md</a></li>\n</ul>","frontmatter":{"title":"[자료구조] 해시테이블","date":"August 06, 2022"}}},"pageContext":{"slug":"/D.S./hash_table/","previous":{"fields":{"slug":"/etc/blog_init/"},"frontmatter":{"title":"[etc] 블로그 이사"}},"next":{"fields":{"slug":"/D.S./red_black_tree/"},"frontmatter":{"title":"[자료구조] Red-Black-Tree"}}}},"staticQueryHashes":["2486386679","3128451518"]}