{"componentChunkName":"component---src-templates-blog-post-js","path":"/OOP/SOLID/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"20cad6a3-cfc2-5d00-a952-1594ab142ca3","excerpt":"SOLID란 로버트 마틴이 명명한 객체지향 프로그래밍 및 설계의 다섯가지 기본 원칙을 말합니다.\n이 글에서는 코드를 Kotlin 언어를 기준으로 작성합니다. 1. SRP: Single Responsibility Principle…","html":"<p>SOLID란 로버트 마틴이 명명한 객체지향 프로그래밍 및 설계의 다섯가지 기본 원칙을 말합니다.\n이 글에서는 코드를 Kotlin 언어를 기준으로 작성합니다.</p>\n<h2 id=\"1-srp-single-responsibility-principle\" style=\"position:relative;\"><a href=\"#1-srp-single-responsibility-principle\" aria-label=\"1 srp single responsibility principle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. SRP: Single Responsibility Principle</h2>\n<blockquote>\n<p>단일 책임 원칙. 가장 기본이 되는 원칙이며 한 객체는 한 책임만 가져야 한다는 원칙입니다.</p>\n</blockquote>\n<p>함수를 동사로 작성해보면 책임을 여러개 갖고 있는건 아닌지 생각해볼 수 있습니다.\n동사 하나로 끝나지 않으면 여러 책임을 지고있는 것입니다.</p>\n<p>고양이가 걸으면서 동시에 밥을 먹더라도 둘은 엄연히 다른 기능입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Cat <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">val</span> leg <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    \n    <span class=\"token comment\">// 한꺼번에 호출</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">walkAndEatAndPrintLeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"뚜벅뚜벅\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"냠냠\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>leg<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// SRP를 고려 </span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"뚜벅뚜벅\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">fun</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"냠냠\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">fun</span> <span class=\"token function\">printLeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>leg<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>고양이가 뚜벅뚜벅이 아닌 사뿐사뿐 걷는다면, SRP를 고려할 때에는 분명히 walk() 함수가 잘못된 것을 알 수 있습니다.\n하지만 SRP를 고려하지 않고 먹을 때 입에서 사뿐사뿐 소리가 난다면 잘못된 줄도 모를 것입니다.</p>\n<p>객체나 함수의 책임을 한 곳이 갖는다면 코드를 수정할 때 영향을 미치는 곳도 확실하고 에러가 발생했을 때 원인을 찾기도 수월해질 것입니다.</p>\n<h2 id=\"2-ocp-open-closed-principle\" style=\"position:relative;\"><a href=\"#2-ocp-open-closed-principle\" aria-label=\"2 ocp open closed principle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. OCP: Open Closed Principle</h2>\n<blockquote>\n<p>개방 폐쇄 원칙. 확장에는 열려있고 수정에는 닫혀있어야 한다는 원칙입니다.</p>\n</blockquote>\n<p>처음 이 원칙을 접했을 때 잘 설명할 수 없었습니다.\n위 코드에서 Spider 클래스를 추가하겠습니다.\nCat과 Spider 중 다리가 더 많은 동물에게 간식을 줄 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Cat <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">val</span> leg <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    \n    <span class=\"token keyword\">fun</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"냠냠\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> Spider <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">val</span> leg <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    \n    <span class=\"token keyword\">fun</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"슥슥\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> cat <span class=\"token operator\">=</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> spider <span class=\"token operator\">=</span> <span class=\"token function\">Spider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token function\">game</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">,</span> spider<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">game</span><span class=\"token punctuation\">(</span>cat<span class=\"token operator\">:</span> Cat<span class=\"token punctuation\">,</span> spider<span class=\"token operator\">:</span> Spider<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">.</span>leg <span class=\"token operator\">></span> spider<span class=\"token punctuation\">.</span>leg<span class=\"token punctuation\">)</span> cat<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">.</span>leg <span class=\"token operator\">&lt;</span> spider<span class=\"token punctuation\">.</span>leg<span class=\"token punctuation\">)</span> spider<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>패배한 cat 대신 dog가 참가한다면 코드가 어떻게 변할까요?\n게임 함수가 변해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// fun game(cat: Cat, spider: Spider) {</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">game</span><span class=\"token punctuation\">(</span>dog<span class=\"token operator\">:</span> Dog<span class=\"token punctuation\">,</span> spider<span class=\"token operator\">:</span> Spider<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>참가자가 바뀌었는데 게임 자체가 변해버립니다. 이 행위는 cat을 dog로 <strong>수정</strong>한 행위입니다. </p>\n<p>그렇다면 <strong>확장</strong>하려면 어떻게 해야할까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Gamer <span class=\"token punctuation\">{</span>\n    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">game</span><span class=\"token punctuation\">(</span>gamer1<span class=\"token operator\">:</span> Gamer<span class=\"token punctuation\">,</span> gamer2<span class=\"token operator\">:</span> Gamer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 예시에서는 인터페이스나 추상클래스처럼 상위 개념을 매개변수로 받아 확장을 고려할 수 있습니다.\n요점은 기능을 추가할 때 기존 코드를 수정하는 것이 아닌 코드를 추가만 할 수 있도록 설계하는 원칙입니다.</p>\n<h2 id=\"3-lsp-liskov-substitution-principle\" style=\"position:relative;\"><a href=\"#3-lsp-liskov-substitution-principle\" aria-label=\"3 lsp liskov substitution principle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. LSP: Liskov Substitution Principle</h2>\n<blockquote>\n<p>리스코프 치환 원칙. 부모 객체를 호출하는 동작에서 자식 객체가 부모 객체를 완전히 대체할 수 있다는 원칙입니다.</p>\n</blockquote>\n<p>객체의 상속이 일어날 때 자식 객체는 부모 객체의 특성을 그대로 갖습니다. 하지만 이 과정에서 무리하거나 의도와 어긋나는 확장으로 인해 잘못된 상속이 일어나기도 합니다.</p>\n<p>유명한 예시로 직사각형과 정사각형이 있습니다.\n정사각형은 직사각형이므로 상속받을 수 있다고 가정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 직사각형</span>\n<span class=\"token keyword\">class</span> Rect <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> width<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    <span class=\"token keyword\">val</span> height<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    \n    <span class=\"token keyword\">fun</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> width <span class=\"token operator\">*</span> height\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 정사각형</span>\n<span class=\"token keyword\">class</span> Square <span class=\"token operator\">:</span> Rect <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">fun</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>width<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> width\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">fun</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span>height<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> height\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>정사각형의 가로 또는 세로를 변경할 때 나머지 변도 길이를 함께 변경해야 합니다. 상속으로 간편하게 구현할 수 있습니다.\n작성한 클래스를 메인 함수에서 활용해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> rect <span class=\"token operator\">=</span> <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    rect<span class=\"token punctuation\">.</span><span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    rect<span class=\"token punctuation\">.</span><span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 직사각형은 넓이 50을 출력할 것입니다.\n리스코프 치환 원칙에 의하면 자식 객체는 부모 객체를 완전히 대체할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> rect <span class=\"token operator\">=</span> <span class=\"token function\">Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    rect<span class=\"token punctuation\">.</span><span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    rect<span class=\"token punctuation\">.</span><span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>선언할 때에만 자식 클래스로 변경했습니다.\n결과는 같을까요? 아닙니다. 아래 정사각형의 넓이는 5 * 5인 25가 나옵니다.</p>\n<p>OCP의 예시에서 보였던 추상화, 이처럼 리스코프 치환 원칙에 맞지 않는다면 원치 않는 결과가 나올 수 있습니다.\n직사각형과 정사각형이 “사각형”을 상속받으면 해결됩니다.</p>\n<h2 id=\"4-isp-interface-segregation-principle\" style=\"position:relative;\"><a href=\"#4-isp-interface-segregation-principle\" aria-label=\"4 isp interface segregation principle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. ISP: Interface Segregation Principle</h2>\n<blockquote>\n<p>인터페이스 분리 원칙. 특정 클라이언트를 위한 인터페이스 여러개가 범용 인터페이스 하나보다 낫다는 원칙입니다.</p>\n</blockquote>\n<p>클라이언트는 사용하지 않는 인터페이스에 강제로 의존해서는 안됩니다.</p>\n<p>걷는 동물도 있고 나는 동물도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Animal <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> Cat <span class=\"token operator\">:</span> Animal <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>동물 인터페이스를 구현하는 Cat은 fly와 walk를 무조건 구현해야 합니다.\n하지만 고양이는 날 수 없기 때문에 ISP를 위반하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Flyable <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> Walkable <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> Animal <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> Cat <span class=\"token operator\">:</span> Animal<span class=\"token punctuation\">,</span> Walkable <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위처럼 인터페이스를 분리해야할 의무가 있습니다.</p>\n<h2 id=\"5-dip-dependency-inversion-principle\" style=\"position:relative;\"><a href=\"#5-dip-dependency-inversion-principle\" aria-label=\"5 dip dependency inversion principle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. DIP: Dependency Inversion Principle</h2>\n<blockquote>\n<p>의존 역전 원칙. 고수준 모듈은 저수준 모듈의 구현에 의존해서는 안된다.</p>\n</blockquote>\n<p>앞서 살펴봤듯이 객체지향 설계는 일상적인 예시를 들어볼 수 있습니다.\n여기서는 스마트폰 충전을 예시로 들겠습니다.\n아이폰을 배제하고 안드로이드 폰만 생각해 보겠습니다.</p>\n<p>과거 휴대전화에는 전용 충전기가 있었습니다. 전용 충전기로만 충전할 수 있다면 전용 충전기에 강한 의존성을 갖고 있다고 말할 수 있습니다.\n하지만 최근처럼 USB-C 타입 단자를 사용하는 스마트폰의 경우 전용 충전기가 아닌 다른 제조사의 충전기를 사용해도 잘 동작합니다.</p>\n<p>이 경우 제조사의 충전기가 USB-C타입 이라는 인터페이스에 의존하게 됩니다.\n기기가 충전기에 의존하던 것을 C타입 단자라는 인터페이스를 둬 의존성을 역전시켰다고 볼 수 있습니다.</p>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<ul>\n<li><a href=\"https://blog.itcode.dev/posts/2021/08/15/liskov-subsitution-principle\">https://blog.itcode.dev/posts/2021/08/15/liskov-subsitution-principle</a></li>\n<li><a href=\"https://steady-coding.tistory.com/388\">https://steady-coding.tistory.com/388</a></li>\n<li>옥수환. <em>아키텍쳐를 알아야 앱이 보인다</em></li>\n</ul>","frontmatter":{"title":"[객체지향] SOLID","date":"August 18, 2022"}}},"pageContext":{"slug":"/OOP/SOLID/","previous":{"fields":{"slug":"/network/http_https/"},"frontmatter":{"title":"[Network] HTTP와 HTTPS"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}