{"componentChunkName":"component---src-templates-blog-post-js","path":"/Android/di_init/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"a08b3567-4d63-5362-acc1-b889c5162291","excerpt":"DI는 Dependency Injection의 준말로, 의존성 주입을 뜻합니다. DI Android에서 데이터를 관리할 때 ViewModel을 사용하곤 합니다. Repository 패턴도 함께 사용할 때가 많은데, 각설하고 코드로 예시를 보이겠습니다. 위 코드에서 ViewModel의 fetch 함수는 repository…","html":"<blockquote>\n<p>DI는 Dependency Injection의 준말로, 의존성 주입을 뜻합니다.</p>\n</blockquote>\n<h2 id=\"di\" style=\"position:relative;\"><a href=\"#di\" aria-label=\"di permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DI</h2>\n<p>Android에서 데이터를 관리할 때 ViewModel을 사용하곤 합니다.<br>\nRepository 패턴도 함께 사용할 때가 많은데, 각설하고 코드로 예시를 보이겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> ViewModel<span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        repository<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 ViewModel의 fetch 함수는 repository라는 변수가 필요합니다.<br>\n이 코드를 실행시키려면 다양한 방법이 있습니다.</p>\n<ol>\n<li>내부에서 객체 생성<br>\n<code class=\"language-text\">private val repository = Repository()</code></li>\n<li>외부에서 주입<br>\n<code class=\"language-text\">class ViewModel(private val repository: Repository): ViewModel()</code></li>\n<li>외부에서 객체 가져오기<br>\n<code class=\"language-text\">fun fetch() { Factory.getRepository().fetch() }</code></li>\n</ol>\n<h2 id=\"재사용\" style=\"position:relative;\"><a href=\"#%EC%9E%AC%EC%82%AC%EC%9A%A9\" aria-label=\"재사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재사용</h2>\n<p>내부에서 객체를 생성한다면 재사용에 좋지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Repository <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> UserRepository <span class=\"token operator\">:</span> Repository\n<span class=\"token keyword\">class</span> AdminRepository <span class=\"token operator\">:</span> Repository</code></pre></div>\n<p>User, Admin이 각각 필요한 ViewModel을 만들어야 할 때,<br>\n내부에서 객체를 생성한다면 각자의 ViewModel을 만들어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> ViewModel<span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> repository <span class=\"token operator\">=</span> <span class=\"token function\">UserRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        repository<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> ViewModel2<span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> repository <span class=\"token operator\">=</span> <span class=\"token function\">AdminRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        repository<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> userViewModel <span class=\"token operator\">=</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> adminViewModel <span class=\"token operator\">=</span> <span class=\"token function\">ViewModel2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 외부에서 주입한다면?</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> repository<span class=\"token operator\">:</span> Repository<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        repository<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> userRepo<span class=\"token operator\">:</span> Repository <span class=\"token operator\">=</span> <span class=\"token function\">UserRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> adminRepo<span class=\"token operator\">:</span> Repository <span class=\"token operator\">=</span> <span class=\"token function\">AdminRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> userViewModel <span class=\"token operator\">=</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span>userRepo<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> adminViewModel <span class=\"token operator\">=</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span>adminRepo<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>인터페이스를 활용해 ViewModel을 재사용할 수 있습니다.</p>\n<h2 id=\"테스트\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트</h2>\n<p>내부에서 객체를 생성한다면 테스트하기 어렵습니다.<br>\nViewModel을 테스트하고자 할 때 Repository와 독립적이라고 할 수 없습니다.<br>\nRepository에 문제가 있다면 ViewModel.fetch()가 정상적으로 실행되지 않습니다.</p>\n<p>하지만 외부에서 주입한다면 테스트 더블을 활용해 항상 성공하는 Repository, 항상 실패하는 Repository를 가정하여 테스트를 진행할 수 있습니다.</p>\n<h2 id=\"끝으로\" style=\"position:relative;\"><a href=\"#%EB%81%9D%EC%9C%BC%EB%A1%9C\" aria-label=\"끝으로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝으로</h2>\n<p>Android에서 DI Library는 대표적으로 Dagger, Kolin, Hilt가 존재합니다.<br>\n이 중 Dagger 기반의 Hilt 라이브러리를 권장하고 있습니다.</p>","frontmatter":{"title":"[DI] Android에서의 DI 첫걸음","date":"November 04, 2021"}}},"pageContext":{"slug":"/Android/di_init/","previous":{"fields":{"slug":"/Android/event_wrapper/"},"frontmatter":{"title":"[Android] Single Live Event & Event wrapper"}},"next":{"fields":{"slug":"/Android/inline_function/"},"frontmatter":{"title":"[Kotlin] inline function"}}}},"staticQueryHashes":["2486386679","3128451518"]}