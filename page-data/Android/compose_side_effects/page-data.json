{"componentChunkName":"component---src-templates-blog-post-js","path":"/Android/compose_side_effects/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"63ca115b-3030-5bae-98d0-6cd5dba702c6","excerpt":"Side effects 일반적인 수명주기에서 더 복잡한 작업을 수행할 때 Side Effects를 필요로 합니다. LaunchedEffect Composable 내에서 suspend 함수를 호출할 때 사용 매개변수 중 하나가 변경되면 재호출 ex) 스낵바 호출, 스크롤 등의 일반적인 동작 rememberCoroutineScope Composable 외부에서 코루틴 실행할 때 사용 ex) 다른 composable을 취소시키는 비동기 동작 rememberUpdatedState…","html":"<h2 id=\"side-effects\" style=\"position:relative;\"><a href=\"#side-effects\" aria-label=\"side effects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Side effects</h2>\n<hr>\n<p>일반적인 수명주기에서 더 복잡한 작업을 수행할 때 Side Effects를 필요로 합니다.</p>\n<h3 id=\"launchedeffect\" style=\"position:relative;\"><a href=\"#launchedeffect\" aria-label=\"launchedeffect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LaunchedEffect</h3>\n<blockquote>\n<p>Composable 내에서 suspend 함수를 호출할 때 사용</p>\n</blockquote>\n<ul>\n<li>매개변수 중 하나가 변경되면 재호출</li>\n<li>ex) 스낵바 호출, 스크롤 등의 일반적인 동작</li>\n</ul>\n<h3 id=\"remembercoroutinescope\" style=\"position:relative;\"><a href=\"#remembercoroutinescope\" aria-label=\"remembercoroutinescope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rememberCoroutineScope</h3>\n<blockquote>\n<p>Composable 외부에서 코루틴 실행할 때 사용</p>\n</blockquote>\n<ul>\n<li>ex) 다른 composable을 취소시키는 비동기 동작</li>\n</ul>\n<h3 id=\"rememberupdatedstate\" style=\"position:relative;\"><a href=\"#rememberupdatedstate\" aria-label=\"rememberupdatedstate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rememberUpdatedState</h3>\n<blockquote>\n<p>값이 변경되더라도 recomposition되지 않는 효과에서 값 참조</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Composable\nfun LandingScreen(onTimeout: () -> Unit) {\n\n    // This will always refer to the latest onTimeout function that\n    // LandingScreen was recomposed with\n    val currentOnTimeout by rememberUpdatedState(onTimeout)\n\n    // Create an effect that matches the lifecycle of LandingScreen.\n    // If LandingScreen recomposes, the delay shouldn't start again.\n    LaunchedEffect(true) {\n        delay(SplashWaitTimeMillis)\n        currentOnTimeout()\n    }\n\n    /* Landing screen content */\n}</code></pre></div>\n<ul>\n<li>LaunchedEffect를 재사용하지 않기 위해 onTimeout을 기억</li>\n</ul>\n<h3 id=\"disposableeffect\" style=\"position:relative;\"><a href=\"#disposableeffect\" aria-label=\"disposableeffect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DisposableEffect</h3>\n<p>Composition을 종료한 뒤 clear해야하는 부수 효과에 적용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">DisposableEffect(lifecycleOwner) {\n        // Create an observer that triggers our remembered callbacks\n        // for sending analytics events\n        val observer = LifecycleEventObserver { _, event ->\n            if (event == Lifecycle.Event.ON_START) {\n                currentOnStart()\n            } else if (event == Lifecycle.Event.ON_STOP) {\n                currentOnStop()\n            }\n        }\n\n        // Add the observer to the lifecycle\n        lifecycleOwner.lifecycle.addObserver(observer)\n\n        // When the effect leaves the Composition, remove the observer\n        onDispose {\n            lifecycleOwner.lifecycle.removeObserver(observer)\n        }\n    }</code></pre></div>\n<ul>\n<li>lifecyclerOwner가 변경되면 DisposableEffect 절을 재호출합니다.</li>\n<li>onDispose절을 포함시키지 않으면 오류가 발생합니다.</li>\n</ul>\n<h3 id=\"sideeffect\" style=\"position:relative;\"><a href=\"#sideeffect\" aria-label=\"sideeffect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SideEffect</h3>\n<blockquote>\n<p>Compose State를 비 Compose 코드에서 구독</p>\n</blockquote>\n<ul>\n<li>비 Compose와 혼용할 때 사용합니다.</li>\n<li>recomposition 될 때마다 호출합니다.</li>\n<li>SideEffect 절에서 일반함수를 호출하려면 SideEffect 블럭 안에서 호출하면 됩니다.</li>\n</ul>\n<h3 id=\"producestate\" style=\"position:relative;\"><a href=\"#producestate\" aria-label=\"producestate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>produceState</h3>\n<blockquote>\n<p>비 Compose 를 Compose State로 변환</p>\n</blockquote>\n<ul>\n<li>비 Compose의 속성을 Compose의 State로 사용할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Composable\nfun loadNetworkImage(\n    url: String,\n    imageRepository: ImageRepository\n): State&lt;Result&lt;Image>> {\n\n    // Creates a State&lt;T> with Result.Loading as initial value\n    // If either `url` or `imageRepository` changes, the running producer\n    // will cancel and will be re-launched with the new keys.\n    return produceState(initialValue = Result.Loading, url, imageRepository) {\n\n        // In a coroutine, can make suspend calls\n        val image = imageRepository.load(url)\n\n        // Update State with either an Error or Success result.\n        // This will trigger a recomposition where this State is read\n        value = if (image == null) {\n            Result.Error\n        } else {\n            Result.Success(image)\n        }\n    }\n}</code></pre></div>\n<ul>\n<li>return 값이 있는 Composable은 소문자로 시작합니다.</li>\n</ul>\n<h3 id=\"derivedstateof\" style=\"position:relative;\"><a href=\"#derivedstateof\" aria-label=\"derivedstateof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>derivedStateOf</h3>\n<blockquote>\n<p>State 객체를 다른 State 객체에서 사용할 때</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    val todoTasks = remember { mutableStateListOf&lt;String>() }\n\n    // Calculate high priority tasks only when the todoTasks or\n    // highPriorityKeywords change, not on every recomposition\n    val highPriorityTasks by remember(todoTasks, highPriorityKeywords) {\n        derivedStateOf {\n            todoTasks.filter { it.containsWord(highPriorityKeywords) }\n        }\n    }</code></pre></div>\n<h3 id=\"snapshotflow\" style=\"position:relative;\"><a href=\"#snapshotflow\" aria-label=\"snapshotflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>snapshotFlow</h3>\n<blockquote>\n<p>State를 Flow로 변환</p>\n</blockquote>\n<ul>\n<li>snapshotFlow가 collect될 때 State 객체의 결과를 내보냅니다.</li>\n<li>State 객체가 변화되면 다시 값을 내보냅니다.</li>\n</ul>\n<h2 id=\"resources\" style=\"position:relative;\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources</h2>\n<hr>\n<ul>\n<li><a href=\"https://developer.android.com/jetpack/compose\">https://developer.android.com/jetpack/compose</a></li>\n</ul>","frontmatter":{"title":"[Compose] Side Effects","date":"November 03, 2021"}}},"pageContext":{"slug":"/Android/compose_side_effects/","previous":{"fields":{"slug":"/Android/compose_phases/"},"frontmatter":{"title":"[Compose] Phases"}},"next":{"fields":{"slug":"/Android/event_wrapper/"},"frontmatter":{"title":"[Android] Single Live Event & Event wrapper"}}}},"staticQueryHashes":["2486386679","3128451518"]}