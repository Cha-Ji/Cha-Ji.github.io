{"componentChunkName":"component---src-templates-blog-post-js","path":"/Android/event_wrapper/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"ebeeefcc-1138-55d1-9315-15dd3dd9f0ba","excerpt":"Single Live Event & Event wrapper Data를 다루는 LiveData객체를 활용해 이벤트 발생을 처리하는 방법. 간단한 구현 특정 이벤트가 발생할 때마다 실행시켜야 하는 함수가 있다면 다음과 같이 구현할 수 있습니다. button이 클릭될 때마다 event객체에 Unit값을 set 해줍니다. event객체를 observe…","html":"<h1 id=\"single-live-event--event-wrapper\" style=\"position:relative;\"><a href=\"#single-live-event--event-wrapper\" aria-label=\"single live event  event wrapper permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single Live Event &#x26; Event wrapper</h1>\n<blockquote>\n<p>Data를 다루는 LiveData객체를 활용해 이벤트 발생을 처리하는 방법.</p>\n</blockquote>\n<h2 id=\"간단한-구현\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%EA%B5%AC%ED%98%84\" aria-label=\"간단한 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단한 구현</h2>\n<ul>\n<li>특정 이벤트가 발생할 때마다 실행시켜야 하는 함수가 있다면 다음과 같이 구현할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> ExampleViewModel<span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> _event<span class=\"token operator\">:</span> MutableLiveData<span class=\"token operator\">&lt;</span>Unit<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">MutableLiveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> event<span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>Unit<span class=\"token operator\">></span> <span class=\"token operator\">=</span> _event\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">callEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _event<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> ExampleActivity<span class=\"token operator\">:</span> <span class=\"token function\">Activity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        button<span class=\"token punctuation\">.</span><span class=\"token function\">ClickListener</span> <span class=\"token punctuation\">{</span>\n            viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">callEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        viewModel<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">showClickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>button이 클릭될 때마다 event객체에 Unit값을 set 해줍니다.</li>\n<li>event객체를 observe해서 위 이벤트가 발생할 때마다 함수를 실행시킵니다.</li>\n</ol>\n<h2 id=\"문제점\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제점</h2>\n<ul>\n<li>위처럼 구현하면 문제가 발생합니다.</li>\n<li>화면 회전과 같이 생명주기가 바뀌는 상황에서 이벤트가 발행된다는 점입니다.</li>\n<li>클릭하지 않았는데 클릭 횟수가 오르는 상황이 생길 수 있습니다.</li>\n<li>이 문제들은 LiveData가 InActive한 상태에서 Active한 상태로 변경되기 때문에 콜백이 호출되어 발생합니다.</li>\n</ul>\n<h2 id=\"single-live-event\" style=\"position:relative;\"><a href=\"#single-live-event\" aria-label=\"single live event permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single Live Event</h2>\n<ul>\n<li>다음은 <a href=\"https://github.com/android/architecture-samples\">아키텍처 샘플</a> 에서 구현한 방식을 축소한 코드입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> SingleLiveEvent<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">:</span> MutableLiveData<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> pending <span class=\"token operator\">=</span> <span class=\"token function\">AtomicBoolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token annotation builtin\">@MainThread</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>owner<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">,</span> observer<span class=\"token operator\">:</span> Observer<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// Observe the internal MutableLiveData</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> Observer<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> t <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pending<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                observer<span class=\"token punctuation\">.</span><span class=\"token function\">onChanged</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@MainThread</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> T<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        pending<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@MainThread</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위처럼 구현하면 불필요한 이벤트가 발생하진 않습니다.</li>\n<li>하지만 아직 문제는 남아있습니다.</li>\n<li>Single이라는 이름에 걸맞게 이벤트 발생을 여러 곳에서 구독할 수 없고 구독자 중 한 명만 소식을 받아볼 수 있습니다.</li>\n</ul>\n<h2 id=\"event-wrapper\" style=\"position:relative;\"><a href=\"#event-wrapper\" aria-label=\"event wrapper permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event Wrapper</h2>\n<ul>\n<li>다음 역시 <a href=\"https://github.com/android/architecture-samples\">아키텍처 샘플</a> 에서 구현한 방식을 축소한 코드입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> Event<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> content<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> hasBeenHandled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">getContentIfNotHandled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasBeenHandled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            hasBeenHandled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n            content\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">peekContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token operator\">=</span> content\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>get Content If Not Handled 함수를 Single Live Event처럼 사용할 수 있습니다.</li>\n<li>peekContent 함수를 이벤트 처리 여부와 관계 없이 사용할 수 있습니다.</li>\n</ul>\n<h2 id=\"끝으로\" style=\"position:relative;\"><a href=\"#%EB%81%9D%EC%9C%BC%EB%A1%9C\" aria-label=\"끝으로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝으로</h2>\n<ul>\n<li>이외에도 coroutine flow의 StateFlow, SharedFlow로 이벤트를 발행할 수 있습니다.</li>\n</ul>","frontmatter":{"title":"[Android] Single Live Event & Event wrapper","date":"November 04, 2021"}}},"pageContext":{"slug":"/Android/event_wrapper/","previous":{"fields":{"slug":"/Android/compose_phases/"},"frontmatter":{"title":"[Compose] Phases"}},"next":{"fields":{"slug":"/Android/di_init/"},"frontmatter":{"title":"[DI] Android에서의 DI 첫걸음"}}}},"staticQueryHashes":["2486386679","3128451518"]}