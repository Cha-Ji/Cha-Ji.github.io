{"componentChunkName":"component---src-templates-blog-post-js","path":"/Android/collection/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"2ab308bc-0f78-50a7-9f29-588eba94b237","excerpt":"Collection 함수의 생성 Collection에는 listOf, setOf, mapOf와 같은 함수가 존재합니다. 여기서 선언한 array의 원소는 변경할 수 없고, 변경하려면 mutable한 collection 함수로 생성해야 합니다. Mutable vs Immutable 직역하면 변할 수 있는, 변할 수 없는 이라는 뜻입니다. Kotlin에서 변수를 선언할 때 var, val 형으로 선언하곤 합니다. val로 지정된 변수는 immutable하며 초기화만 가능합니다. var…","html":"<h3 id=\"collection-함수의-생성\" style=\"position:relative;\"><a href=\"#collection-%ED%95%A8%EC%88%98%EC%9D%98-%EC%83%9D%EC%84%B1\" aria-label=\"collection 함수의 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collection 함수의 생성</h3>\n<ul>\n<li>Collection에는 listOf, setOf, mapOf와 같은 함수가 존재합니다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> array <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>여기서 선언한 array의 원소는 변경할 수 없고, 변경하려면 mutable한 collection 함수로 생성해야 합니다.</li>\n</ul>\n<h3 id=\"mutable-vs-immutable\" style=\"position:relative;\"><a href=\"#mutable-vs-immutable\" aria-label=\"mutable vs immutable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mutable vs Immutable</h3>\n<p>직역하면 변할 수 있는, 변할 수 없는 이라는 뜻입니다.</p>\n<p>Kotlin에서 변수를 선언할 때 var, val 형으로 선언하곤 합니다.</p>\n<p>val로 지정된 변수는 immutable하며 초기화만 가능합니다.</p>\n<p>var로 지정된 변수는 mutable하며 값을 바꿀 수 있습니다.</p>\n<p>또한, Collection 함수는 대체로 immutable하며 가변적으로 만들고 싶다면 mutable한 collection 함수로 선언해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> <span class=\"token function\">mutableListOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>여기서 선언한 array는 원소를 변경할 수 있습니다.</li>\n</ul>\n<h3 id=\"for문과-array\" style=\"position:relative;\"><a href=\"#for%EB%AC%B8%EA%B3%BC-array\" aria-label=\"for문과 array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for문과 array</h3>\n<p>배열을 선언했다면 모든 원소를 탐색할 수 있어야 합니다.</p>\n<p>Kotlin은 함수형 프로그래밍을 좋아하기 때문에 Collection 함의 원소를 탐색하는 여러 함수가 존재하지만,</p>\n<p>반복문을 사용해도 첫 원소부터 마지막 원소까지 훑을 수 있습니다.</p>\n<p>저는 코딩테스트를 연습하며 Python 언어에 익숙했고, Kotlin에서의 for문은 생소했습니다.</p>\n<p>Kotlin에서의 for문은 in을 주로 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// i는 0부터 array의 size까지</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span> until array<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>두 for문은 array의 원소를 처음부터 끝까지 훑는 반복문입니다.</li>\n</ul>\n<h3 id=\"when\" style=\"position:relative;\"><a href=\"#when\" aria-label=\"when permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>when</h3>\n<p>배열을 순회하는 목적 중 하나는 원하는 원소를 찾고 싶을 때 입니다.</p>\n<p>제어문을 사용하면 원하는 조건에 부합할 때만 작동하는 명령을 만들 수 있습니다.</p>\n<p>Kotlin의 제어문에는 대표적으로 if문과 when문이 있습니다.</p>\n<p>if문을 여러개 사용할 때 간단하게 when 문으로 대체할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">when</span><span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">-></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">-></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  a <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token operator\">-></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위 if 문과 when 문은 똑같이 작동합니다. 정답은 없지만 저에게는 when문이 더 가독성이 좋게 느껴지네요ㅎ</li>\n</ul>\n<h2 id=\"2-제네릭\" style=\"position:relative;\"><a href=\"#2-%EC%A0%9C%EB%84%A4%EB%A6%AD\" aria-label=\"2 제네릭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 제네릭</h2>\n<hr>\n<blockquote>\n<p>“제네릭 프로그래밍은 데이터 형식에 의존하지 않고 하나의 값이 여러 다른 데이터 타입들을 가질 수 있는 기술에 중점을 두어 재사용성을 높일 수 있는 프로그래밍이다.” -<a href=\"https://ko.wikipedia.org/wiki/%EC%A0%9C%EB%84%A4%EB%A6%AD_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">https://ko.wikipedia.org/wiki/제네릭_프로그래밍</a></p>\n</blockquote>\n<h3 id=\"왜-쓸까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%93%B8%EA%B9%8C\" aria-label=\"왜 쓸까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 쓸까?</h3>\n<p>코틀린에서는 Int를 매개변수로 받는 함수가 있으면</p>\n<p>그 함수에 String을 넘겨줄 때 오류가 발생합니다.</p>\n<p>일반 자료형은 toInt()와 toString()과 같은 함수를 사용해 타입 캐스팅을 해주면 되지만,</p>\n<p>배열의 자료형을 변경하려면 모든 원소에 함수를 사용해줘야 하며, List로 선언된 배열에 string을 넣어줄 수 없어 새 배열을 만들어야 합니다.</p>\n<h3 id=\"사용\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9\" aria-label=\"사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용</h3>\n<p>함수를 선언할 때 fun 바로 뒤에 &#x3C;T: Comparable>를 붙여주고</p>\n<p>자료형에 T를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">:</span> Comparable<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>leg<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>leg<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위와 같이 함수를 만들면 leg에 {‘left leg’, ‘right leg’}가 들어와도 {2, 4, 6, 8}이 들어와도 자료형에 구애받지 않고 에러 없이 출력할 수 있습니다.</li>\n</ul>\n<h3 id=\"주의할-점\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\" aria-label=\"주의할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의할 점</h3>\n<ul>\n<li>객체를 생성할 때에는 제네릭 타입을 사용할 수 없습니다.</li>\n<li>자료형을 확정짓지 않는만큼 코드의 가독성이 떨어질 수 있습니다.</li>\n</ul>\n<p>따로 자료형을 지정해주지 않아도 되는 편리함을 가졌지만,</p>\n<p>코드를 볼 때 자료형을 확인할 수 없고 복잡하다는 단점도 생각하면서 써야겠습니다.</p>","frontmatter":{"title":"[Android] Collection","date":"July 02, 2000"}}},"pageContext":{"slug":"/Android/collection/","previous":{"fields":{"slug":"/Android/livedata/"},"frontmatter":{"title":"[Android] LiveData"}},"next":{"fields":{"slug":"/Android/view_binding/"},"frontmatter":{"title":"[Android] View Binding"}}}},"staticQueryHashes":["2486386679","3128451518"]}