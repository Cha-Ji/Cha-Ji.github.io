{"componentChunkName":"component---src-templates-blog-post-js","path":"/Android/viewmodel/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"7110d175-45d3-580e-9dbe-d091ba4d57fa","excerpt":"ViewModel viewModel은 Android Jetpack의 구성요소이며 UI 관련 데이터를 관리합니다. MVC 패턴에서 Controller에 과도한 책임이 할당되는 문제를 어느정도 해결해줍니다. 특징 UI 컨트롤러의 수명 주기를 관리합니다. 컨트롤러 로직에서 뷰 데이터 소유권을 분리하는 목적으로 사용합니다. 클래스를 분리하기 때문에 다른 화면에서 재사용이 가능합니다. 구현 아주 간략한 코드입니다. ViewModel 클래스를 생성해 관찰할 LiveData…","html":"<h2 id=\"viewmodel\" style=\"position:relative;\"><a href=\"#viewmodel\" aria-label=\"viewmodel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ViewModel</h2>\n<p>viewModel은 Android Jetpack의 구성요소이며 UI 관련 데이터를 관리합니다.</p>\n<p>MVC 패턴에서 Controller에 과도한 책임이 할당되는 문제를 어느정도 해결해줍니다.</p>\n<h2 id=\"특징\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95\" aria-label=\"특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h2>\n<ul>\n<li>UI 컨트롤러의 수명 주기를 관리합니다.</li>\n<li>컨트롤러 로직에서 뷰 데이터 소유권을 분리하는 목적으로 사용합니다.</li>\n<li>클래스를 분리하기 때문에 다른 화면에서 재사용이 가능합니다.</li>\n</ul>\n<h2 id=\"구현\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84\" aria-label=\"구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현</h2>\n<ul>\n<li>아주 간략한 코드입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> TempViewModel <span class=\"token operator\">:</span> ViewModel <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> _temp <span class=\"token operator\">=</span> MutableLiveData<span class=\"token operator\">&lt;</span>Item<span class=\"token operator\">></span> <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">{</span>\n        MutableLiveData<span class=\"token operator\">&lt;</span>Item<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">val</span> temp<span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>Item<span class=\"token operator\">></span> <span class=\"token operator\">=</span> _temp\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> AppcompatActivity <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">val</span> model<span class=\"token operator\">:</span> TempViewModel <span class=\"token keyword\">by</span> <span class=\"token function\">viewModels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        model<span class=\"token punctuation\">.</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> Observer<span class=\"token operator\">&lt;</span>Item<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>    \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ViewModel 클래스를 생성해 관찰할 LiveData에 관한 함수를 작성합니다.</li>\n<li>Activity, Fragment에서는 by viewModels() 키워드를 사용해 선언할 수 있고, 관찰하거나 작성한 함수를 사용합니다.</li>\n</ul>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<ul>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel?hl=ko\">Android 공식 사이트</a></li>\n</ul>","frontmatter":{"title":"[Android] ViewModel","date":"July 02, 2000"}}},"pageContext":{"slug":"/Android/viewmodel/","previous":{"fields":{"slug":"/O.S./GC/"},"frontmatter":{"title":"[OS] Garbage Collector"}},"next":{"fields":{"slug":"/Android/run_catching/"},"frontmatter":{"title":"[Android] 예외처리: run catching"}}}},"staticQueryHashes":["2486386679","3128451518"]}