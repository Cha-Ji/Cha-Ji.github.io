{"componentChunkName":"component---src-templates-blog-post-js","path":"/Android/compose_migration/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"8723085e-4300-50db-8122-3842a8b232cf","excerpt":"이 글은 RecyclerView로 구성된 한 화면을 Compose로 변경해보며 느낀점과 compose의 기본 개념을 서술합니다. Compose의 특징 적은 수의 코드 손쉬운 유지보수 실시간 미리보기 기능 빠른 개발시간 선언형 프로그래밍 화면 전체를 개념적으로 재생성한 후 변경사항만 적용하는 방식을 적용할 수 있었습니다. 적용 이유와 후기 기존 코드를 migration하며 차이를 느껴보고 싶었습니다. RecyclerView를 작성하는 과정에서 코드 수가 크게 감소했다. compose…","html":"<blockquote>\n<p>이 글은 RecyclerView로 구성된 한 화면을 Compose로 변경해보며 느낀점과<br>\ncompose의 기본 개념을 서술합니다.</p>\n</blockquote>\n<h2 id=\"compose의-특징\" style=\"position:relative;\"><a href=\"#compose%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"compose의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compose의 특징</h2>\n<hr>\n<ul>\n<li>\n<p>적은 수의 코드</p>\n<ul>\n<li>손쉬운 유지보수</li>\n</ul>\n</li>\n<li>\n<p>실시간 미리보기 기능</p>\n<ul>\n<li>빠른 개발시간</li>\n</ul>\n</li>\n<li>\n<p>선언형 프로그래밍</p>\n<ul>\n<li>화면 전체를 개념적으로 재생성한 후 변경사항만 적용하는 방식을 적용할 수 있었습니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"적용-이유와-후기\" style=\"position:relative;\"><a href=\"#%EC%A0%81%EC%9A%A9-%EC%9D%B4%EC%9C%A0%EC%99%80-%ED%9B%84%EA%B8%B0\" aria-label=\"적용 이유와 후기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용 이유와 후기</h2>\n<hr>\n<ul>\n<li>\n<p>기존 코드를 migration하며 차이를 느껴보고 싶었습니다.</p>\n<ul>\n<li>RecyclerView를 작성하는 과정에서 코드 수가 크게 감소했다.</li>\n</ul>\n</li>\n<li>\n<p>compose는 성능이 좋지 않다는 이야기가 있습니다.<br>\n성능 이슈는 타인의 말을 들어서는 크게 와닿지 않았습니다.<br>\n직접 비교하기 위해 기존 코드를 compose로 변경했습니다.</p>\n<ul>\n<li>의도한 대로 성능의 차이를 느끼지는 못했다.</li>\n<li>하지만 성능을 생각하며 개발하다보니 View의 재사용에 대해 고민했고,<br>\ncompose에서는 변경된 사항만 똑똑하게 재사용하고 있기 때문에<br>\n첫 생성을 제외하고는 충분히 좋은 성능을 가진다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"lifecycle\" style=\"position:relative;\"><a href=\"#lifecycle\" aria-label=\"lifecycle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LifeCycle</h2>\n<hr>\n<p>compose는 아주 간단한 생명 주기를 갖습니다.</p>\n<p>조금 더 복잡하게 사용하고 싶다면 Side effects를 학습해야합니다.</p>\n<ul>\n<li>composition</li>\n<li>recomposition</li>\n<li>Leave the composition</li>\n</ul>\n<h3 id=\"composition\" style=\"position:relative;\"><a href=\"#composition\" aria-label=\"composition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composition</h3>\n<ul>\n<li>호출될 때마다 Composition에 여러 인스턴스가 배치됩니다.</li>\n<li>여기서 State 객체가 변경되면 Recomposition이 트리거됩니다.</li>\n</ul>\n<h3 id=\"recomposition\" style=\"position:relative;\"><a href=\"#recomposition\" aria-label=\"recomposition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recomposition</h3>\n<ul>\n<li>\n<p>Composable은 호출될 때 call site를 기억하며 식별자로 갖는다고 생각할 수 있습니다.</p>\n<ul>\n<li>call site는 소스코드의 위치를 말합니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">LoginScreen</span><span class=\"token punctuation\">(</span>showError<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>showError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">LoginError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">LoginInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// This call site affects where LoginInput is placed in Composition</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">LoginInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>showError를 변경시켜 Recomposition이 진행되면 관련된 LoginError만 새 인스턴스가 배치됩니다.</li>\n</ul>\n<blockquote>\n<p>반복문을 사용하면 코드 위치가 같은데 다 똑같은 Composable인가?</p>\n</blockquote>\n<ul>\n<li>이럴 때에는 인스턴스를 구분하기 위해 call site 외에 실행 순서가 적용되고 재사용이 되지 않습니다.</li>\n<li>key 값을 지정해 인스턴스를 구분시켜준다면 재사용이 가능하게 됩니다.</li>\n</ul>\n<blockquote>\n<p>그래서 어떻게 똑똑한 재활용을 하는거지?</p>\n</blockquote>\n<ul>\n<li>먼저 Stable한 Composable은 안정적입니다. primitive한 속성은 모두 Stable합니다.</li>\n<li>Stable하고 변경되지 않았다면 recomposition을 건너뛸 수 있습니다.</li>\n<li>Stable하지 않다면 변경이 되었는지 equals를 확인합니다.</li>\n<li>안정적인 것으로 간주하기 위해 @Stable 어노테이션을 사용할 수 있습니다.</li>\n</ul>\n<h2 id=\"resources\" style=\"position:relative;\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources</h2>\n<hr>\n<ul>\n<li><a href=\"https://developer.android.com/jetpack/compose/lifecycle\">https://developer.android.com/jetpack/compose</a></li>\n</ul>","frontmatter":{"title":"[Compose] Compose로 migration하기","date":"November 03, 2021"}}},"pageContext":{"slug":"/Android/compose_migration/","previous":{"fields":{"slug":"/Android/compose_side_effects/"},"frontmatter":{"title":"[Compose] Side Effects"}},"next":{"fields":{"slug":"/Android/compose_phases/"},"frontmatter":{"title":"[Compose] Phases"}}}},"staticQueryHashes":["2486386679","3128451518"]}