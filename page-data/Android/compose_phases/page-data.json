{"componentChunkName":"component---src-templates-blog-post-js","path":"/Android/compose_phases/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"6837044e-7d53-5fe9-98b1-c44cc93b4e15","excerpt":"프레임의 3가지 단계 Composition → Layout → Drawing 1. Composition Composable이 생성되는 단계입니다. 생성이 되면 다음 단계를 수행합니다. 2. Layout measurement, placement 두 단계가 존재합니다. 재배치를 하더라도 재측정을 하지는 않습니다. 3. Drawing Canvas를 호출하거나 draw관련 메서드를 호출하면 실행합니다. State 읽기 최적화 위 코드에서는 State…","html":"<h2 id=\"프레임의-3가지-단계\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A0%88%EC%9E%84%EC%9D%98-3%EA%B0%80%EC%A7%80-%EB%8B%A8%EA%B3%84\" aria-label=\"프레임의 3가지 단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프레임의 3가지 단계</h2>\n<hr>\n<ul>\n<li>Composition → Layout → Drawing</li>\n</ul>\n<h3 id=\"1-composition\" style=\"position:relative;\"><a href=\"#1-composition\" aria-label=\"1 composition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Composition</h3>\n<ul>\n<li>Composable이 생성되는 단계입니다.</li>\n<li>생성이 되면 다음 단계를 수행합니다.</li>\n</ul>\n<h3 id=\"2-layout\" style=\"position:relative;\"><a href=\"#2-layout\" aria-label=\"2 layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Layout</h3>\n<ul>\n<li>measurement, placement 두 단계가 존재합니다.</li>\n<li>재배치를 하더라도 재측정을 하지는 않습니다.</li>\n</ul>\n<h3 id=\"3-drawing\" style=\"position:relative;\"><a href=\"#3-drawing\" aria-label=\"3 drawing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Drawing</h3>\n<ul>\n<li>Canvas를 호출하거나 draw관련 메서드를 호출하면 실행합니다.</li>\n</ul>\n<h2 id=\"state-읽기-최적화\" style=\"position:relative;\"><a href=\"#state-%EC%9D%BD%EA%B8%B0-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"state 읽기 최적화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State 읽기 최적화</h2>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">Box <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> listState <span class=\"token operator\">=</span> <span class=\"token function\">rememberLazyListState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// Non-optimal implementation!</span>\n        Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">with</span><span class=\"token punctuation\">(</span>LocalDensity<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// State read of firstVisibleItemScrollOffset in composition</span>\n                <span class=\"token punctuation\">(</span>listState<span class=\"token punctuation\">.</span>firstVisibleItemScrollOffset <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">LazyColumn</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> listState<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위 코드에서는 State객체인 firstVisibleItemScrollOffset이 수시로 변경됩니다.</li>\n<li>Box 내부에서 호출되고 있으므로 Box 자체가 재호출됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">Box <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> listState <span class=\"token operator\">=</span> <span class=\"token function\">rememberLazyListState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span>\n        Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">offset</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// State read of firstVisibleItemScrollOffset in Layout</span>\n            <span class=\"token function\">IntOffset</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> listState<span class=\"token punctuation\">.</span>firstVisibleItemScrollOffset <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">LazyColumn</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> listState<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위 코드에서는 변경되는 값을 람다로 전달합니다.</li>\n<li>Modifier에게 람다로 전달하는 블록은 레이아웃의 배치단계에서 호출됩니다.</li>\n</ul>\n<blockquote>\n<p>그 밖에도 단계를 거스르는 방식의 호출 방법은 불필요한 반복을 야기시킬 수 있습니다.</p>\n</blockquote>","frontmatter":{"title":"[Compose] Phases","date":"November 03, 2021"}}},"pageContext":{"slug":"/Android/compose_phases/","previous":{"fields":{"slug":"/Android/compose_side_effects/"},"frontmatter":{"title":"[Compose] Side Effects"}},"next":{"fields":{"slug":"/Android/event_wrapper/"},"frontmatter":{"title":"[Android] Single Live Event & Event wrapper"}}}},"staticQueryHashes":["2486386679","3128451518"]}