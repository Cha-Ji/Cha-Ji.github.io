{"componentChunkName":"component---src-templates-blog-post-js","path":"/Android/livedata/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"53dbcd13-7175-5b61-87cc-eaa12d3c432b","excerpt":"LiveData LiveData는 관찰자 패턴을 활용한 Data Holder로 볼 수 있습니다. 간단하게 말해서 value를 set, post하는 과정을 Observe 합니다. MVVM을 예시로 들면, ViewModel에서 post한 데이터를 Activity에서 observe해 사용합니다. 추가로, postValue가 여러번 호출된다면 최신의 값이 적용되기 때문에 변경된 값을 읽지 못하는 경우가 생겨 setValue 방식을 권장합니다. 장점 LifeCycle…","html":"<h2 id=\"livedata\" style=\"position:relative;\"><a href=\"#livedata\" aria-label=\"livedata permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LiveData</h2>\n<ul>\n<li>LiveData는 관찰자 패턴을 활용한 Data Holder로 볼 수 있습니다.</li>\n<li>간단하게 말해서 value를 set, post하는 과정을 Observe 합니다.</li>\n<li>MVVM을 예시로 들면, ViewModel에서 post한 데이터를 Activity에서 observe해 사용합니다.</li>\n<li>추가로, postValue가 여러번 호출된다면 최신의 값이 적용되기 때문에 변경된 값을 읽지 못하는 경우가 생겨 setValue 방식을 권장합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> liveData <span class=\"token operator\">=</span> MutableLiveData<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span><span class=\"token punctuation\">)</span> \n\n<span class=\"token keyword\">val</span> test <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span> \n<span class=\"token keyword\">val</span> setTest <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"a\"</span></span> \n\n<span class=\"token comment\">// observe </span>\nliveData<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> Observer<span class=\"token punctuation\">{</span> test <span class=\"token operator\">=</span> it <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n        \n<span class=\"token comment\">// set value </span>\nliveData<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> setTest \n        \n<span class=\"token comment\">// post value </span>\nliveData<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span>setTest<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<ul>\n<li>LifeCycle의 변화를 인식하기 때문에 필요하지 않을 때 메모리를 절약하는 방법이 될 수 있습니다. (Destroy에 자동 메모리 해제)</li>\n<li>또한 LifeCycle에 대응하지 못해 발생하는 오류도 없습니다. (사용자의 갑작스런 조작으로 인한 pause, destroy 등을 대응)</li>\n</ul>\n<h2 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h2>\n<ul>\n<li>lifeCycle에 대응하기 때문에 Test를 진행할 때 Destroy 상태에도 관찰되도록 설정해줘야 합니다.</li>\n<li>java 코드를 가져다 쓰기 때문에 기본적으로 null이 허용되는 자료구조를 갖고 있고 kotlin에서는 null 예외처리가 필요합니다.</li>\n<li>이에 대한 대안으로 flow를 사용하기도 합니다.</li>\n</ul>","frontmatter":{"title":"[Android] LiveData","date":"July 02, 2000"}}},"pageContext":{"slug":"/Android/livedata/","previous":{"fields":{"slug":"/Android/recyclerview/"},"frontmatter":{"title":"[Android] RecyclerView"}},"next":{"fields":{"slug":"/Android/collection/"},"frontmatter":{"title":"[Android] Collection"}}}},"staticQueryHashes":["2486386679","3128451518"]}