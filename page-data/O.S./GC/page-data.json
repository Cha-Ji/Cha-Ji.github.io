{"componentChunkName":"component---src-templates-blog-post-js","path":"/O.S./GC/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"f811804e-7597-52e6-9b41-eeedc0a4e4bb","excerpt":"메모리 관리 시뮬레이션 Heap allocation Algorithm Buddy memory allocation - Wikipedia Heap 자료구조는 주로 동적으로 할당되며 블록의 크기가 일정하지 않습니다. 따라서 외부 단편화가 생기는 경우가 많으며 이를 방지하기 위해 빈 공간을 찾아 집어넣는 과정이 필요합니다. 때문에 연결리스트나 해쉬맵 자료구조가 어울립니다. *단편화: 선형적인 자료구조를 사용한다면 가변적인 크기의 블록을 해제하고 채워가는 과정에서 중간에 padding…","html":"<h1 id=\"메모리-관리-시뮬레이션\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EB%AE%AC%EB%A0%88%EC%9D%B4%EC%85%98\" aria-label=\"메모리 관리 시뮬레이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리 관리 시뮬레이션</h1>\n<h2 id=\"heap-allocation-algorithm\" style=\"position:relative;\"><a href=\"#heap-allocation-algorithm\" aria-label=\"heap allocation algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heap allocation Algorithm</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Buddy_memory_allocation\">Buddy memory allocation - Wikipedia</a></p>\n<ul>\n<li>Heap 자료구조는 주로 동적으로 할당되며 블록의 크기가 일정하지 않습니다.</li>\n<li>따라서 외부 단편화가 생기는 경우가 많으며 이를 방지하기 위해 빈 공간을 찾아 집어넣는 과정이 필요합니다.</li>\n<li>때문에 연결리스트나 해쉬맵 자료구조가 어울립니다.</li>\n</ul>\n<p>*단편화: 선형적인 자료구조를 사용한다면 가변적인 크기의 블록을 해제하고 채워가는 과정에서 중간에 padding이 많아지고 빈 공간이 많이 생기게 됩니다.</p>\n<h2 id=\"프로세스-메모리\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%A9%94%EB%AA%A8%EB%A6%AC\" aria-label=\"프로세스 메모리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 메모리</h2>\n<hr>\n<ul>\n<li>메모리 계층은 CPU와의 거리에 따라 분류됩니다.</li>\n<li>레지스터 -> 캐시 -> 메인메모리 -> 보조기억장치 -> 외부기억장치 순입니다.</li>\n<li>메모리의 구조는 크게 Stack, Heap, Data, Code 네 영역으로 나뉩니다.</li>\n</ul>\n<h3 id=\"heap\" style=\"position:relative;\"><a href=\"#heap\" aria-label=\"heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heap</h3>\n<ul>\n<li>메모리 구조에서의 heap은 자료구조에서의 heap과는 다릅니다.</li>\n<li>동적할당에 주로 사용되는 메모리이며 일반적으로 stack보다 큰 용량을 차지합니다.</li>\n<li>컴퓨터는 컴파일 시간동안 코드를 번역하고 런타임 동안 실행하는데, Heap은 이 때 크기가 결정됩니다.</li>\n<li>번역할 때가 아니라 실행할 때 사용되기 때문에 컴퓨터가 아닌 사용자가 관리해야합니다.</li>\n</ul>\n<h3 id=\"stack\" style=\"position:relative;\"><a href=\"#stack\" aria-label=\"stack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stack</h3>\n<ul>\n<li>Stack 은 자료구조에서의 Stack 과 흡사합니다.</li>\n<li>LIFO 방식에 따라 동작하며 높은 주소에서 낮은 주소의 방향으로 할당됩니다.</li>\n</ul>\n<h3 id=\"data-영역\" style=\"position:relative;\"><a href=\"#data-%EC%98%81%EC%97%AD\" aria-label=\"data 영역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>data 영역</h3>\n<ul>\n<li>전역변수, 정적변수, 배열, 구조체 등이 저장됩니다.</li>\n<li>초기화되지 않은 데이터는 BSS에 저장되며 static 변수는 공간만 할당되고 함수가 실행될 때 마저 초기화됩니다.</li>\n</ul>\n<h3 id=\"code-영역\" style=\"position:relative;\"><a href=\"#code-%EC%98%81%EC%97%AD\" aria-label=\"code 영역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code 영역</h3>\n<ul>\n<li>코드 자체를 구성합니다. 기계어로 제어됩니다.</li>\n</ul>\n<p><a href=\"https://recorda.tistory.com/entry/20160503%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0\">출처 - Recorda (Tistory블로그)</a></p>\n<h2 id=\"jvm-에서의-gc\" style=\"position:relative;\"><a href=\"#jvm-%EC%97%90%EC%84%9C%EC%9D%98-gc\" aria-label=\"jvm 에서의 gc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JVM 에서의 GC</h2>\n<hr>\n<ul>\n<li>stop the world 와 mark and sweep 의 단계를 거쳐 동작합니다.</li>\n</ul>\n<h3 id=\"stop-the-world\" style=\"position:relative;\"><a href=\"#stop-the-world\" aria-label=\"stop the world permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stop-the-world</h3>\n<ul>\n<li>stop-the-world 는 GC 이외의 모든 쓰레드 작업을 멈추는 것입니다.</li>\n<li>이 stop-the-world 시간을 줄이는 것이 GC의 효율을 높입니다.</li>\n</ul>\n<h3 id=\"mark-and-sweep\" style=\"position:relative;\"><a href=\"#mark-and-sweep\" aria-label=\"mark and sweep permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mark-and-sweep</h3>\n<ul>\n<li>사용되는 메모리와 사용되지 않는 메모리를 식별하고</li>\n<li>식별된 메모리를 해제하는 작업입니다.</li>\n</ul>\n<h3 id=\"young-영역\" style=\"position:relative;\"><a href=\"#young-%EC%98%81%EC%97%AD\" aria-label=\"young 영역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Young 영역</h3>\n<ul>\n<li>매우 많은 객체가 들렸다 가는 곳입니다. Minor GC 가 발생하면서 객체가 사라집니다.</li>\n</ul>\n<h3 id=\"old-영역\" style=\"position:relative;\"><a href=\"#old-%EC%98%81%EC%97%AD\" aria-label=\"old 영역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Old 영역</h3>\n<ul>\n<li>Young 에서 살아남은 객체가 여기로 복사됩니다. 용량도 크게 할당하며 Major GC가 발생하면서 객체가 사라집니다.</li>\n</ul>\n<h3 id=\"minor-gc\" style=\"position:relative;\"><a href=\"#minor-gc\" aria-label=\"minor gc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Minor GC</h3>\n<ul>\n<li>Eden: 새로 생성된 객체가 할당되는 영역</li>\n<li>Survivor: 살아남은 객체</li>\n<li>새 객체가 Eden 영역에 할당되고 Eden이 꽉차면 Minor GC가 실행됩니다.</li>\n<li>해제가 진행되다가 2개의 Survivor 영역이 꽉차면 Old 영역으로 이동하게 됩니다.</li>\n</ul>\n<h3 id=\"major-gc\" style=\"position:relative;\"><a href=\"#major-gc\" aria-label=\"major gc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Major GC</h3>\n<ul>\n<li>Old 영역의 메모리가 부족해지면 작동합니다. Young 영역보다 크기도 크고 시간도 10배 이상 오래걸립니다.</li>\n</ul>\n<p><a href=\"https://mangkyu.tistory.com/118\">출처 - 망나니개발자 (Tistory블로그)</a></p>","frontmatter":{"title":"[OS] Garbage Collector","date":"July 02, 2000"}}},"pageContext":{"slug":"/O.S./GC/","previous":{"fields":{"slug":"/O.S./Linux/"},"frontmatter":{"title":"[OS] Linux"}},"next":{"fields":{"slug":"/O.S./cache/"},"frontmatter":{"title":"[OS] Cache"}}}},"staticQueryHashes":["2486386679","3128451518"]}