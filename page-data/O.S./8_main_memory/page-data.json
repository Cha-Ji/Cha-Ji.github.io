{"componentChunkName":"component---src-templates-blog-post-js","path":"/O.S./8_main_memory/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"19bab006-27c0-50ab-8fea-be4e8823f1a6","excerpt":"CPU 스케줄링의 결과로 CPU 이용률과 사용자에게 제공하는 컴퓨터 응답속도를 향상할 수 있습니다. 하지만 이러한 성능 향상을 위해 많은 프로세스를 메모리에 유지해야합니다. 이 글에서는 메모리를 관리하는 다양한 방법에 관해 설명합니다. 주소할당 메모리 주소공간에서 명령어와 데이터 바인딩은 그 바인딩이 이루어지는 시점에 따라 다음과 같이 구분됩니다. Compile time 바인딩 메모리 내에 들어갈 위치를 컴파일 시간에 알 수 있다면 컴파일러는 절대 코드를 생성할 수 있습니다. Load time…","html":"<p>CPU 스케줄링의 결과로 CPU 이용률과 사용자에게 제공하는 컴퓨터 응답속도를 향상할 수 있습니다.</p>\n<p>하지만 이러한 성능 향상을 위해 많은 프로세스를 메모리에 유지해야합니다.</p>\n<p>이 글에서는 메모리를 관리하는 다양한 방법에 관해 설명합니다.</p>\n<h2 id=\"주소할당\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%86%8C%ED%95%A0%EB%8B%B9\" aria-label=\"주소할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주소할당</h2>\n<p>메모리 주소공간에서 명령어와 데이터 바인딩은 그 바인딩이 이루어지는 시점에 따라 다음과 같이 구분됩니다.</p>\n<h3 id=\"compile-time-바인딩\" style=\"position:relative;\"><a href=\"#compile-time-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"compile time 바인딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compile time 바인딩</h3>\n<p>메모리 내에 들어갈 위치를 컴파일 시간에 알 수 있다면 컴파일러는 절대 코드를 생성할 수 있습니다.</p>\n<h3 id=\"load-time-바인딩\" style=\"position:relative;\"><a href=\"#load-time-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"load time 바인딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Load time 바인딩</h3>\n<p>메모리 적재 위치를 컴파일 시간에 알지 못한다면 이진 코드를 재배치 가능 코드(Relocatable Code)로 만들어야 합니다.</p>\n<p>심볼과 진짜 번지수의 바인딩은 실제 적재되는 시간에 이루어집니다.</p>\n<p>재배치 가능 코드는 시작 주소가 변경되면 아무 때나 사용자 코드를 다시 적재하기만 하면 됩니다.</p>\n<h3 id=\"execution-time-바인딩\" style=\"position:relative;\"><a href=\"#execution-time-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"execution time 바인딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Execution time 바인딩</h3>\n<p>메모리 내 한 세그먼트로부터 다른 세그먼트로 옮겨질 수 있다면 바인딩이 실행시간까지 허용되었다고 합니다.</p>\n<h2 id=\"메모리-할당\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9\" aria-label=\"메모리 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리 할당</h2>\n<p>프로세스가 시스템에 들어오면 운영체제는 각 프로세스가 메모리를 얼마나 요구하며, 또 사용가능한 메모리 공간이 어디에 얼마나 있는지를 고려하여 공간을 할당합니다.</p>\n<p>이에따라 동적 메모리 할당 문제를 고민하게 됩니다.</p>\n<ul>\n<li>first-fit(최초 적합): 첫 번째 가용 공간을 할당합니다.</li>\n<li>\n<p>best-fit(최적 적합): 가장 작은 공간을 할당합니다.</p>\n<ul>\n<li>탐색이 필요합니다.</li>\n</ul>\n</li>\n<li>\n<p>worst-fit(최악 적합): 가장 큰 공간을 할당합니다.</p>\n<ul>\n<li>탐색이 필요합니다.</li>\n</ul>\n</li>\n</ul>\n<p>최초 적합이 일반적으로 속도가 빠르며 최초나 최적 적합 모두 메모리 이용 효율이 좋다는 것이 입증되었습니다.</p>\n<h3 id=\"내부-단편화\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EB%B6%80-%EB%8B%A8%ED%8E%B8%ED%99%94\" aria-label=\"내부 단편화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내부 단편화</h3>\n<p>프로세스가 사용하는 메모리 공간에 남는 부분이 생기는 것을 말합니다.</p>\n<h3 id=\"외부-단편화\" style=\"position:relative;\"><a href=\"#%EC%99%B8%EB%B6%80-%EB%8B%A8%ED%8E%B8%ED%99%94\" aria-label=\"외부 단편화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>외부 단편화</h3>\n<p>first-fit, best-fit 모두 외부 단편화로 인해 어려움을 겪습니다.</p>\n<p>적재와 제거가 반복된 메모리의 가용 공간은 너무 작아지곤 합니다.</p>\n<p>해당 문제로 인해 프로세스 사이에 못 쓰는 가용 공간이 남게 되는것이 외부 단편화입니다.</p>\n<p>합치면 충분한 공간이 되는 조각들이 너무 분산되어 있을 때 발생합니다.</p>\n<ul>\n<li>압축: 외부 단편화를 해소하기 위해 프로세스가 사용하는 공간들을 한쪽으로 몰아둡니다. 작업효율이 좋지 않습니다.</li>\n</ul>\n<h2 id=\"paging\" style=\"position:relative;\"><a href=\"#paging\" aria-label=\"paging permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Paging</h2>\n<p>메모리 관리는 프로세스의 물리 주소 공간이 연속적이어야 합니다. 하지만 해당 제약을 없앤게 페이징 기법입니다.</p>\n<p>물리 메모리는 Frame 이라는 고정 크기로 분리되어 있고 논리 메모리는 페이지라 불리는 고정 크기의 블록으로 분리됩니다.</p>\n<p>남는 프레임에 적절히 적재되면서 외부 단편화를 해결할 수 있는 장점이 존재합니다.</p>\n<p>내부 단편화 문제의 비중이 늘어나게 되는 단점이 존재합니다. 페이지 프레임은 고정크기이기 때문에 1B가 모자라지만 1000B의 페이지 프레임이 필요할 수 있습니다.</p>\n<h3 id=\"segmentation\" style=\"position:relative;\"><a href=\"#segmentation\" aria-label=\"segmentation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Segmentation</h3>\n<p>서로 다른 크기의 논리적 단위인 Segment로 분할하는 방법입니다.</p>\n<p>사용자는 세그먼트 번호와 변위 두가지 주소로 지정하며, 세 그먼트 테이블에는 각 세그먼트의 base주소와 length가 저장됩니다.</p>\n<p>외부 단편화 문제가 생기는 단점이 존재합니다.</p>\n<h2 id=\"swapping\" style=\"position:relative;\"><a href=\"#swapping\" aria-label=\"swapping permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swapping</h2>\n<p>메모리 관리를 위해 사용되는 기법을 말합니다. 표준 스와핑 방식으로는 RR과 같은 스케줄링의 다중 프로그래밍 환경에서 CPU 할당 시간이 끝난 프로세스의 메모리를 보조기억장치로 내보내고 다른 프로세스의 메모리를 불러들일 수 있습니다.</p>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<ul>\n<li>Abraham Silberschatz, Peter B. Galvin, Greg Gagne의 『Operating System Concept 10th』</li>\n<li><a href=\"https://github.com/JaeYeopHan/Interview_Question_for_Beginner/tree/master/OS#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-%EC%A0%84%EB%9E%B5\">https://github.com/JaeYeopHan/Interview_Question_for_Beginner/tree/master/OS#메모리-관리-전략</a></li>\n</ul>","frontmatter":{"title":"[공룡책] 메인메모리","date":"July 02, 2020"}}},"pageContext":{"slug":"/O.S./8_main_memory/","previous":{"fields":{"slug":"/O.S./dirty_bit/"},"frontmatter":{"title":"[OS] Dirty Bit"}},"next":{"fields":{"slug":"/O.S./GC/"},"frontmatter":{"title":"[OS] Garbage Collector"}}}}}