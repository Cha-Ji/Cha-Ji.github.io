{"componentChunkName":"component---src-templates-blog-post-js","path":"/O.S./cache/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"b71dd648-bc9c-5a88-8c53-8adaa81a6df5","excerpt":"1. 캐시 캐시 컴퓨터를 구성하는 메모리는 다양한 종류가 있습니다. 대표적으로 RAM, SSD, HDD가 있습니다. SSD와 RAM의 차이는 무엇일까요? 간단하게 용량과 거리라고 생각하면 됩니다. RAM에 저장된 파일은 빠르게 탐색할 수 있지만 용량이 적습니다. SSD…","html":"<h2 id=\"1-캐시\" style=\"position:relative;\"><a href=\"#1-%EC%BA%90%EC%8B%9C\" aria-label=\"1 캐시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 캐시</h2>\n<hr>\n<h3 id=\"캐시\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%9C\" aria-label=\"캐시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캐시</h3>\n<ul>\n<li>컴퓨터를 구성하는 메모리는 다양한 종류가 있습니다.</li>\n<li>대표적으로 RAM, SSD, HDD가 있습니다.</li>\n<li>SSD와 RAM의 차이는 무엇일까요? 간단하게 용량과 거리라고 생각하면 됩니다.</li>\n<li>RAM에 저장된 파일은 빠르게 탐색할 수 있지만 용량이 적습니다.</li>\n<li>SSD에는 파일을 많이 저장할 수 있지만 램보다는 느린 속도를 보입니다.</li>\n<li>캐시메모리 역시 메모리의 종류 중 하나입니다. 정말 빠르지만 용량이 한정적이므로 관리가 중요합니다.</li>\n</ul>\n<h3 id=\"지역성\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EC%97%AD%EC%84%B1\" aria-label=\"지역성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지역성</h3>\n<ul>\n<li>시간적 지역성: 한 번 접근한 데이터는 금방 또 접근할 가능성이 높다.</li>\n<li>공간적 지역성: 한 번 접근한 데이터의 근처를 또 접근할 가능성이 높다.</li>\n</ul>\n<h3 id=\"캐시의-동작\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%9C%EC%9D%98-%EB%8F%99%EC%9E%91\" aria-label=\"캐시의 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캐시의 동작</h3>\n<ul>\n<li>앞서말한 지역성을 바탕으로 <strong><em>자주 쓰는 데이터를 빨리</em></strong> 꺼낼 수 있게 합니다.</li>\n<li>캐시는 세 부분으로 나뉘는데, 오프셋, 인덱스, 태그로 이루어져있습니다.</li>\n<li>속도와 용량에서 최대한 타협하다보니 인덱싱을 하는 데에 많은 기술이 녹아있습니다.</li>\n<li>가령 32비트의 메모리 공간이 존재한다면 10비트는 인덱스에 사용됩니다.</li>\n<li>하지만 10비트를 사용하더라도 인덱스가 중복될 위험이 있으며, 태그비트를 추가로 사용합니다.</li>\n<li>데이터를 저장할 때 태그비트부터 확인한 다음 인덱스에 접근시켜 중복의 위험을 줄입니다.</li>\n<li>최대한 빠르게, 하지만 너무 용량이 작아 쓸모없어지지는 않게 타협하는 것이 캐시의 핵심입니다.</li>\n</ul>\n<h3 id=\"캐시의-교체\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%9C%EC%9D%98-%EA%B5%90%EC%B2%B4\" aria-label=\"캐시의 교체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캐시의 교체</h3>\n<ul>\n<li>자주 사용할 데이터를 예측하는 일은 어렵습니다.</li>\n<li>하지만 자주 사용할 데이터만 재사용하고 나머지는 그때그때 탐색하는 것이 효율적입니다.</li>\n<li>자주 사용할 데이터를 거르기 위해 주로 LRU방식을 많이 사용합니다.</li>\n</ul>\n<h2 id=\"2-lru-캐시\" style=\"position:relative;\"><a href=\"#2-lru-%EC%BA%90%EC%8B%9C\" aria-label=\"2 lru 캐시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. LRU 캐시</h2>\n<hr>\n<h3 id=\"lru-캐시의-동작방식\" style=\"position:relative;\"><a href=\"#lru-%EC%BA%90%EC%8B%9C%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D\" aria-label=\"lru 캐시의 동작방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LRU 캐시의 동작방식</h3>\n<ul>\n<li>Least Recently Used 의 약자입니다.</li>\n<li>우선순위를 두고 최근 접근한 데이터는 가장 높은 우선순위로 잔류합니다.</li>\n<li>메모리가 꽉차면 잔류 우선순위가 가장 낮은 데이터부터 제거됩니다.</li>\n</ul>\n<h3 id=\"hashmap\" style=\"position:relative;\"><a href=\"#hashmap\" aria-label=\"hashmap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HashMap</h3>\n<ul>\n<li>해시맵은 자료의 추가, 삭제와 탐색속도가 O(1)로 빠른 자료구조입니다.</li>\n<li>연결리스트는 탐색속도가 O(N)으로 해시맵이 LRU알고리즘에 어울리는 자료구조입니다.</li>\n</ul>","frontmatter":{"title":"[OS] Cache","date":"July 02, 2000"}}},"pageContext":{"slug":"/O.S./cache/","previous":{"fields":{"slug":"/O.S./GC/"},"frontmatter":{"title":"[OS] Garbage Collector"}},"next":{"fields":{"slug":"/O.S./Linux/"},"frontmatter":{"title":"[OS] Linux"}}}},"staticQueryHashes":["2486386679","3128451518"]}