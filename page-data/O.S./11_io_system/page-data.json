{"componentChunkName":"component---src-templates-blog-post-js","path":"/O.S./11_io_system/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"1410d2a8-1c7c-571f-9819-7e417f8f7972","excerpt":"컴퓨터의 두 가지 주요 작업은 계산과 입출력 작업입니다.\n이 중 입출력 작업이 더 중요한 경우가 많습니다.\n이 글에서는 운영체제의 입출력 서브시스템의 구조를 살펴봅니다. 인터럽트 CPU는 명령어를 끝내고 다음 명령을 수행하기 전 항상 이 인터럽트 요청 라인을 검사합니다. 예기치 않은 상황을 만났을 때, 현재보다 더 중요한 일이 발생했을 때 인터럽트가 발생합니다. 외부 인터럽트는 전원 이상, 기계착오, 외부신호, 입출력 등 외부적인 요인으로 발생합니다. 내부 인터럽트는 Trap이라고 부르며,…","html":"<p>컴퓨터의 두 가지 주요 작업은 계산과 입출력 작업입니다.\n이 중 입출력 작업이 더 중요한 경우가 많습니다.\n이 글에서는 운영체제의 입출력 서브시스템의 구조를 살펴봅니다.</p>\n<h2 id=\"인터럽트\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8\" aria-label=\"인터럽트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터럽트</h2>\n<p>CPU는 명령어를 끝내고 다음 명령을 수행하기 전 항상 이 인터럽트 요청 라인을 검사합니다.</p>\n<p>예기치 않은 상황을 만났을 때, 현재보다 더 중요한 일이 발생했을 때 인터럽트가 발생합니다.</p>\n<p>외부 인터럽트는 전원 이상, 기계착오, 외부신호, 입출력 등 외부적인 요인으로 발생합니다.</p>\n<p>내부 인터럽트는 Trap이라고 부르며, 0나누기, 오버플로우 등 잘못된 명령이나 데이터를 사용할 때 발생합니다.</p>\n<p>소프트웨어 인터럽트는 요청에 의해 발생합니다. (SVC 인터럽트)</p>\n<h3 id=\"처리-과정\" style=\"position:relative;\"><a href=\"#%EC%B2%98%EB%A6%AC-%EA%B3%BC%EC%A0%95\" aria-label=\"처리 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>처리 과정</h3>\n<ol>\n<li>입출력 하드웨어 컨트롤러가 신호를 보낸다.</li>\n<li>CPU가 알아차리고 각종 레지스터 값과 상태 정보를 저장한다.</li>\n<li>메모리 상 인터럽트 핸들러 루틴으로 이동한다.</li>\n</ol>\n<h3 id=\"풀링\" style=\"position:relative;\"><a href=\"#%ED%92%80%EB%A7%81\" aria-label=\"풀링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀링</h3>\n<p>풀링은 사용자가 명령어를 사용해 입력핀의 값을 계속읽어 변화를 알아내는 방식입니다.</p>\n<p>인터럽트 요청 플래그를 차례로 비교하며 인터럽트 핸들러 루틴을 수행합니다.</p>\n<h3 id=\"인터럽트-1\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-1\" aria-label=\"인터럽트 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터럽트</h3>\n<p>인터럽트 방식은 MCU 자체가 하드웨어적 변화를 체크하여 변화 시에만 일정한 동작을 합니다.</p>\n<p>하드웨어로 지원을 받아야한다는 제약이 있지만 신속한 대응이 가능합니다.</p>\n<ul>\n<li>Vector Interrupt - 프로그램 루틴없이 하드웨어적으로 판별하며 회로가 복잡하고 추가 하드웨어가 필요합니다. 직렬과 병령 우선순위 부여 방식이 있습니다.</li>\n<li>Daisy Chain - 인터럽트가 발생하는 모든 장치를 우선순위에 따라 한 회선에 직렬로 연결합니다. 병렬 부여 방식은 장치마다 별개의 회선으로 연결합니다.</li>\n</ul>\n<h2 id=\"캐싱\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%B1\" aria-label=\"캐싱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캐싱</h2>\n<p>자주 사용될 자료의 복사본을 저장하는 빠른 메모리 영역입니다.</p>\n<p>복사를 한다는 점에서 버퍼와의 차이가 있습니다.</p>\n<h3 id=\"캐시의-지역성\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%9C%EC%9D%98-%EC%A7%80%EC%97%AD%EC%84%B1\" aria-label=\"캐시의 지역성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캐시의 지역성</h3>\n<p>자주 사용될 자료를 예측하기 위해, Hit rate를 높이기 위해 지역성 원리를 사용합니다.</p>\n<p>최근 참조된 주소의 내용은 다시 참조되는 특성을 시간 지역성이라 합니다.</p>\n<ul>\n<li>재귀함수, 스택의 예시가 있습니다.</li>\n</ul>\n<p>참조된 주소와 인접한 주소의 내용이 다시 참조되는 특성을 공간 지역성이라 합니다.</p>\n<ul>\n<li>배열을 순회할 때 인접한 주소를 순회하는 예시가 있습니다.</li>\n</ul>\n<h3 id=\"캐싱-라인\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%B1-%EB%9D%BC%EC%9D%B8\" aria-label=\"캐싱 라인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캐싱 라인</h3>\n<p>캐시의 데이터를 빠르게 참조하기 위해 태그를 붙입니다. 이 때 태그의 묶음을 캐싱라인이라 합니다.</p>\n<p>종류로는 대표적으로 Fully Associative, Set Associative, Direct Map 세 가지가 있습니다.</p>\n<p>참고: <a href=\"https://gofo-coding.tistory.com/entry/5-Set-Associative-Mapping\">https://gofo-coding.tistory.com/entry/5-Set-Associative-Mapping</a></p>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<ul>\n<li><a href=\"https://github.com/gyoogle/tech-interview-for-developer/blob/master/Computer%20Science/Operating%20System/Interrupt.md\">https://github.com/gyoogle/tech-interview-for-developer/blob/master/Computer Science/Operating System/Interrupt.md</a></li>\n<li><a href=\"https://github.com/JaeYeopHan/Interview_Question_for_Beginner/tree/master/OS#%EC%BA%90%EC%8B%9C%EC%9D%98-%EC%A7%80%EC%97%AD%EC%84%B1\">https://github.com/JaeYeopHan/Interview<em>Question</em>for_Beginner/tree/master/OS#캐시의-지역성</a></li>\n<li>Abraham Silberschatz, Peter B. Galvin, Greg Gagne의 『Operating System Concept 10th』</li>\n</ul>","frontmatter":{"title":"[공룡책] 입출력 시스템","date":"July 11, 2022"}}},"pageContext":{"slug":"/O.S./11_io_system/","previous":{"fields":{"slug":"/O.S./10_대용량_저장장치_구조/"},"frontmatter":{"title":"[공룡책] 대용량 저장장치 구조"}},"next":{"fields":{"slug":"/Android/activity/"},"frontmatter":{"title":"[Android] Activity Component"}}}},"staticQueryHashes":["2486386679","3128451518"]}