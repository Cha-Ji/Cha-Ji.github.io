{"componentChunkName":"component---src-templates-blog-post-js","path":"/O.S./3_thread/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"fc18333d-4fb7-5ca8-93e4-491efdef757a","excerpt":"앞서 작성한 운영체제, 프로세스에 이어 스레드에 대해 간단히 이야기합니다. 스레드 CPU 이용의 기본 단위입니다. 스레드 ID, PC, 레지스터 집합, 스택으로 구성됩니다. 프로세스 vs 스레드 프로세스는 실행중인 프로그램의 인스턴스이며, 스레드는 실행되는 흐름의 단위입니다. 한 프로그램에서 둘 이상의 프로세스를 생성한다면 빈번한 context switching…","html":"<blockquote>\n<p>앞서 작성한 운영체제, 프로세스에 이어 스레드에 대해 간단히 이야기합니다.</p>\n</blockquote>\n<h2 id=\"스레드\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C\" aria-label=\"스레드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드</h2>\n<ul>\n<li>CPU 이용의 기본 단위입니다.</li>\n<li>스레드 ID, PC, 레지스터 집합, 스택으로 구성됩니다.</li>\n</ul>\n<h3 id=\"프로세스-vs-스레드\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-vs-%EC%8A%A4%EB%A0%88%EB%93%9C\" aria-label=\"프로세스 vs 스레드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 vs 스레드</h3>\n<ul>\n<li>프로세스는 실행중인 프로그램의 인스턴스이며, 스레드는 실행되는 흐름의 단위입니다.<br>\n한 프로그램에서 둘 이상의 프로세스를 생성한다면 빈번한 context switching으로 성능 저하가 생깁니다.<br>\n그래서 스레드가 탄생했으며 스레드는 한 프로그램에서의 여러 실행흐름입니다.<br>\n스레드는 여러 영역을 공유하지만 스택은 독립적으로 소유합니다.</li>\n</ul>\n<h3 id=\"스레드의-공유영역\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EA%B3%B5%EC%9C%A0%EC%98%81%EC%97%AD\" aria-label=\"스레드의 공유영역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드의 공유영역</h3>\n<ul>\n<li>\n<p>Stack(공유되지 않음)</p>\n<ul>\n<li>스택은 함수 호출 시 전달되는 parameter, return address가 저장됩니다. 각 스레드는 독립적으로 함수 호출이 가능하다는 이야기가 됩니다.</li>\n</ul>\n</li>\n<li>\n<p>PC Register(공유되지 않음)</p>\n<ul>\n<li>프로그램 카운터는 명령이 수행할 지점을 가리킵니다. 스레드는 결국 스케줄러에게 다시 선점당하기 때문에 명령어가 어디까지 수행됐는지 기억해야 합니다.</li>\n</ul>\n</li>\n<li>\n<p>Code</p>\n<ul>\n<li>Code영역이 공유돼야 자신이 포함된 프로세스의 함수를 호출할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>Data &#x26; Heap</p>\n<ul>\n<li>전역변수와 메모리 공간을 공유합니다. 힙 영역이 공유되면 스레드 간 통신을 할 수 있게 됩니다.</li>\n<li>IPC 없이도 통신이 가능합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"다중스레드\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%A4%91%EC%8A%A4%EB%A0%88%EB%93%9C\" aria-label=\"다중스레드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다중스레드</h3>\n<ul>\n<li>다중 스레드의 장점은 Responsiveness, Resource sharing, Economy, Scalability 네가지 부류로 나눌 수 있습니다.</li>\n<li>\n<p>응답성(responsiveness)</p>\n<ul>\n<li>프로그램의 일부가 봉쇄되거나 긴 작업을 수행하더라도 프로그램 수행이 계속됩니다.</li>\n<li>UI를 설계할 때 특히 유용합니다.</li>\n</ul>\n</li>\n<li>\n<p>자원 공유(resource sharing)</p>\n<ul>\n<li>프로세스는 공유메모리, 메시지 전달 기법을 통해야만 자원을 공유할 수 있습니다.</li>\n<li>스레든느 자동으로 그들이 속한 프로세스의 자원과 메모리를 공유합니다.</li>\n<li>코드와 데이터 공유의 이점은 한 응용 프로그램이 같은 주소 공간 내 여러 다른 작업을 하는 스레드를 가질 수 있다는 점입니다.</li>\n</ul>\n</li>\n<li>\n<p>경제성(economy)</p>\n<ul>\n<li>프로세스 생성보다 스레드 생성이 경제적입니다. 또한 context switching 역시 스레드 사이에서 더 빠릅니다.</li>\n</ul>\n</li>\n<li>\n<p>규모 적응성(scalability)</p>\n<ul>\n<li>다중 처리기 구조에서 각각의 스레드가 병렬수행됩니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"java-thread\" style=\"position:relative;\"><a href=\"#java-thread\" aria-label=\"java thread permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java Thread</h3>\n<ol>\n<li>Thread 클래스에서 파생된 새 클래스를 만들고 run() 메소드를 재정의해 스레드를 명시적으로 생성합니다.</li>\n<li>Runnable 인터페이스의 구현체를 정의해 스레드를 명시적으로 생성합니다.</li>\n</ol>\n<h3 id=\"스레드-풀\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%ED%92%80\" aria-label=\"스레드 풀 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드 풀</h3>\n<p>다중 스레드 서버는 아직 여러 문제를 갖고 있습니다.</p>\n<ul>\n<li>서비스할 때마다 스레드를 생성하는 데 소요되는 시간입니다.</li>\n<li>최대 스레드 수를 정해야 합니다. 스레드가 무한하다면 CPU 시간, 메모리 공간 등의 시스템 자원이 고갈됩니다.</li>\n</ul>\n<p>이에 대한 대안이 스레드 풀입니다.</p>\n<ul>\n<li>프로세스를 시작할 때 일정한 수의 스레드들을 미리 풀로 만들어둡니다.</li>\n</ul>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<ul>\n<li>Abraham Silberschatz, Peter B. Galvin, Greg Gagne의 『Operating System Concept 10th』</li>\n</ul>","frontmatter":{"title":"[공룡책] 스레드","date":"July 03, 2020"}}},"pageContext":{"slug":"/O.S./3_thread/","previous":{"fields":{"slug":"/O.S./2_process/"},"frontmatter":{"title":"[공룡책] 프로세스"}},"next":{"fields":{"slug":"/O.S./queue/"},"frontmatter":{"title":"[OS] 다단계 큐와 다단계 피드백 큐"}}}},"staticQueryHashes":["2486386679","3128451518"]}