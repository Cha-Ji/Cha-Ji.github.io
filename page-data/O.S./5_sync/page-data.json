{"componentChunkName":"component---src-templates-blog-post-js","path":"/O.S./5_sync/","result":{"data":{"site":{"siteMetadata":{"title":"Cha-Ji","author":"Cha-Ji","siteUrl":"https://Cha-Ji.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"chaji"}}},"markdownRemark":{"id":"bd343236-9c41-5f8d-b6b6-eecfae0af526","excerpt":"논리 주소 공간을 공유하는 협력적 프로세스의 질서 있는 실행을 보장하며 이를 통해 데이터의 일관성을 유지하는 다양한 매커니즘을 논의합니다. 임계구역 Critical Section 각 프로세스는 임계구역이라고 부르는 코드 부분을 포함하고 있고, 그 안에서는 하나 이상의 다른 프로세스와 공유하는 데이터에 접근하고 갱신할 수 있습니다. 임계구역 문제는 상호배제, 진행, 한정된 대기 세 가지 요구사항을 충족해야 합니다. Mutual Exclusion 프로세스가 Critical Section…","html":"<blockquote>\n<p>논리 주소 공간을 공유하는 협력적 프로세스의 질서 있는 실행을 보장하며 이를 통해 데이터의 일관성을 유지하는 다양한 매커니즘을 논의합니다.</p>\n</blockquote>\n<h3 id=\"임계구역\" style=\"position:relative;\"><a href=\"#%EC%9E%84%EA%B3%84%EA%B5%AC%EC%97%AD\" aria-label=\"임계구역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>임계구역</h3>\n<blockquote>\n<p>Critical Section</p>\n</blockquote>\n<p>각 프로세스는 임계구역이라고 부르는 코드 부분을 포함하고 있고,<br>\n그 안에서는 하나 이상의 다른 프로세스와 공유하는 데이터에 접근하고 갱신할 수 있습니다.</p>\n<p>임계구역 문제는 상호배제, 진행, 한정된 대기 세 가지 요구사항을 충족해야 합니다.</p>\n<ol>\n<li>Mutual Exclusion</li>\n<li>프로세스가 Critical Section에서 실행중이라면, 다른 프로세스들은 그들이 가진 Critical Section에서 실행될 수 없습니다.</li>\n<li>Progress</li>\n<li>Ciritical Section에서 실행중인 프로세스가 없고 별도의 동작이 없는 프로세스들만 Critical Section 진입 후보로서 참여될 수 있습니다.</li>\n<li>Bounded Waiting</li>\n<li>프로세스가 Critical Section에 진입 신청 후부터 받아들여질 때까지 다른 프로세스들이 Critical Section에 진입하는 횟수는 제한이 있어야 합니다.</li>\n</ol>\n<p>상호 배제를 통해 한 번에 하나의 프로세스만 임계구역에서 활성화됩니다.<br>\n진행을 통해 임계구역에 어떤 프로세스가 들어갈지 협력적으로 결정합니다.<br>\n한정된 대기를 통해 프로그램이 자신의 임계구역에 들어가기 전 대기시간을 제한합니다.</p>\n<p>해당 임계구역 문제의 해결책으로 Mutex Lock, Semaphores를 활용할 수 있습니다.</p>\n<h3 id=\"mutex-semaphore\" style=\"position:relative;\"><a href=\"#mutex-semaphore\" aria-label=\"mutex semaphore permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mutex, Semaphore</h3>\n<ul>\n<li>Mutex는 한 스레드나 프로세스에 의해 소유될 수 있는 key를 기반으로 상호를 배제합니다.</li>\n<li>누군가가 key를 갖고 있다면 다른이는 key를 사용할 수 없고 대기합니다.</li>\n<li>반납을 해야지만 다시 key를 사용할 수 있습니다.</li>\n<li>Semaphore는 현재 공유자원에 접근할 수 있는 스레드와 프로세스의 수를 변수로 두어 상호를 배제합니다.</li>\n</ul>\n<p>화장실로 비유할 수 있습니다.</p>\n<p>뮤텍스는 화장실이 하나 뿐인 식당과 비슷합니다.<br>\n앞서 입장한 손님이 키를 소유하고, 화장실에서 나올 때 키를 반납합니다.<br>\n뒤이어 입장하는 손님들은 키가 반납될 때까지 카운터에서 대기합니다.<br>\n이로써 화장실에 동시에 여러명이 존재하는 상황을 막습니다.</p>\n<p>세마포어는 화장실의 칸이 여러개인 식당과 비슷합니다.<br>\n앞서 입장한 손님들이 화장실 칸에 들어갈 때 전광판에 남은 칸의 개수를 비춥니다.<br>\n손님들이 퇴장하면 전광판의 숫자가 오르며<br>\n전광판에 숫자 0이 표시되면 손님들은 대기합니다.</p>\n<h4 id=\"카운팅--이진-세마포\" style=\"position:relative;\"><a href=\"#%EC%B9%B4%EC%9A%B4%ED%8C%85--%EC%9D%B4%EC%A7%84-%EC%84%B8%EB%A7%88%ED%8F%AC\" aria-label=\"카운팅  이진 세마포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>카운팅 / 이진 세마포</h4>\n<p>카운팅 세마포는 가용한 개수를 가진 자원에 대해 접근 제어용으로 사용되며, 세마포는 그 가용한 자원의 개수로 초기화됩니다.<br>\n자원을 사용하면 세마포가 감소, 방출하면 세마포가 증가합니다.</p>\n<p>이진 세마포는 Mutex라고도 부르며 Mutual Exclusion의 준말입니다.<br>\n0과 1 사이 값만 가능하며 다중 프로세스 간 Critical Section 문제를 해결하기 위해 사용합니다.</p>\n<p>위 뮤텍스와 세마포 방법은 말로만 들으면 만능 기법이지만 당연히 단점이 존재합니다.</p>\n<h3 id=\"바쁜-대기\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EC%81%9C-%EB%8C%80%EA%B8%B0\" aria-label=\"바쁜 대기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바쁜 대기</h3>\n<blockquote>\n<p>Busy Waiting</p>\n</blockquote>\n<p>Critical Section에 진입해야하는 프로세스는 진입 코드를 계속 반복 실행해야하며 CPU 시간을 낭비했습니다.<br>\n진입을 실패한 프로세스를 block시킨 뒤 자리가 날 때 다시 깨우는 방식으로 해당 Busy Waiting을 해결합니다.</p>\n<h3 id=\"모니터\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%8B%88%ED%84%B0\" aria-label=\"모니터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모니터</h3>\n<p>고급 언어의 설계 구조물로써 개발자의 코드를 상호배제 하게끔 만든 추상화된 데이터 형태입니다.<br>\n공유자원에 접근하기 위한 키 획득과 자원 사용 후 해제를 모두 처리합니다.</p>\n<p>mutex가 보장되며 접근중인 스레드가 wait 상태일 때 새 스레드가 접근할 수 있게 됩니다.<br>\n새 스레드는 대기중인 스레드에게 notify할 수 있고 깨어난 스레드는 critical section에 진입할 수 있게 됩니다.</p>\n<p>자바에서 싱글톤 패턴을 구현할 때 인스턴스의 생성 여부를 확인하기 위해 synchronized 키워드를 사용하곤 합니다.</p>\n<h3 id=\"데드락-철학자의-만찬\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EB%93%9C%EB%9D%BD-%EC%B2%A0%ED%95%99%EC%9E%90%EC%9D%98-%EB%A7%8C%EC%B0%AC\" aria-label=\"데드락 철학자의 만찬 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데드락: 철학자의 만찬</h3>\n<ol>\n<li>일정 시간 생각을 한다.</li>\n<li>왼쪽 포크가 사용 가능해질 때까지 대기한다. 만약 사용 가능하다면 집어든다.</li>\n<li>오른쪽 포크가 사용 가능해질 때까지 대기한다. 만약 사용 가능하다면 집어든다.</li>\n<li>양쪽의 포크를 잡으면 일정 시간만큼 식사를 한다.</li>\n<li>오른쪽 포크를 내려놓는다.</li>\n<li>왼쪽 포크를 내려놓는다.</li>\n<li>다시 1번으로 돌아간다</li>\n</ol>\n<p>데드락은 교착상태를 뜻합니다.</p>\n<p>둘 이상의 프로세스가 Critical Section의 진입을 무한정 기다리고 있는 현상입니다.</p>\n<p>만약 프로세스A가 자원1을 사용하는데 자원 2가 필요합니다.</p>\n<p>동시에 프로세스B가 자원2를 사용하는데 자원 1이 필요합니다.</p>\n<p>서로를 무한정 기다리며 교착상태에 빠지게 됩니다.</p>\n<p>공유 자원에서 상호를 배제하다보면 발생할 수 있는 문제입니다.</p>\n<h3 id=\"발생-조건\" style=\"position:relative;\"><a href=\"#%EB%B0%9C%EC%83%9D-%EC%A1%B0%EA%B1%B4\" aria-label=\"발생 조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>발생 조건</h3>\n<ul>\n<li>Mutual Exclusion: 상호를 배제한 상태 (포크는 동시에 한 철학자만 사용할 수 있다.)</li>\n<li>Hold and Wait: 최소 하나의 자원을 점유하면서 다른 자원까지 탐내는 상태 (포크를 하나 갖고 있지만 다른 포크도 기다린다.)</li>\n<li>No preemption: 이미 할당된 자원을 빼앗을 수 없는 상태 (사용중인 포크를 빼앗을 수 없다.)</li>\n<li>Circular wait: 순환 형태로 자원을 대기하는 상태 (모든 철학자가 포크를 기다린다.)</li>\n</ul>\n<h3 id=\"대처\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EC%B2%98\" aria-label=\"대처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대처</h3>\n<ol>\n<li>\n<p>예방</p>\n<ul>\n<li>상호배제 부정: 여러 프로세스가 자원을 공유한다.</li>\n<li>점유대기 부정: 프로세스 실행 전 모든 자원을 할당한다.</li>\n<li>비선점 부정: 점유중인 자원을 요구하면 반납</li>\n<li>순환대기 부정: 자원에 고유번호 할당 후 순서대로 자원 요구</li>\n</ul>\n</li>\n<li>\n<p>회피</p>\n<ul>\n<li>은행원 알고리즘<br>\n프로세스가 자원을 요구할 때 시스템은 자원을 할당한 후에도 안정 상태로 남아있게 되는지 사전에 검사</li>\n</ul>\n</li>\n<li>\n<p>탐지</p>\n<ul>\n<li>자원 요청 시 탐지</li>\n</ul>\n</li>\n<li>\n<p>회복</p>\n<ul>\n<li>교착상태를 일으킨 프로세스를 종료하거나 자원을 해제</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<ul>\n<li>Abraham Silberschatz, Peter B. Galvin, Greg Gagne의 『Operating System Concept 10th』</li>\n<li><a href=\"https://worthpreading.tistory.com/90\">https://worthpreading.tistory.com/90</a></li>\n<li><a href=\"https://github.com/JaeYeopHan/Interview_Question_for_Beginner/tree/master/OS#cpu-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%9F%AC\">면접질문</a></li>\n<li><a href=\"https://m.blog.naver.com/PostView.naver?blogId=hirit808&#x26;logNo=221793966623&#x26;targetKeyword=&#x26;targetRecommendationCode=1\">모니터</a></li>\n</ul>","frontmatter":{"title":"[공룡책] 동기화","date":"July 03, 2022"}}},"pageContext":{"slug":"/O.S./5_sync/","previous":{"fields":{"slug":"/O.S./4_scheduling/"},"frontmatter":{"title":"[공룡책] CPU 스케줄링"}},"next":{"fields":{"slug":"/O.S./6_sync_ex/"},"frontmatter":{"title":"[공룡책] 동기화 예제"}}}},"staticQueryHashes":["2486386679","3128451518"]}